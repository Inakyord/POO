/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paradise_cartas_v3.blackjack.BJGUI;

import Casino.Casino;
import Persona.Cliente.Cliente;
import java.util.ArrayList;
import paradise_cartas_v3.blackjack.*;
import paradise_cartas_v3.cartas.Naipe;
import ActionListeners.Deteccion;
import JFrames.CuadroStandard;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.WindowEvent;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import paradise_cartas_v3.cartas.Baraja;

/**
 * Clase para la interfaz grafica del juego de Black Jack.
 * @author Equipo 2.
 */
public class ParadiseBJ extends javax.swing.JFrame implements CuadroStandard{
    
    //private BlackJack bj = new BlackJack();
    private int totalApostado = 0;
    private Cliente jugador;
    private Casino casino;
    private Deteccion detector;
    static int fichasJugador;
    //detector.setBoton(); ya
    //jugador.fichas += ganado perdido:
    //jugador.bono;
    //jugador.apuestaMax*100;
    //casino.sumaBlackjack(monto ganado);

    /**
     * Creates new form ParadiseBJ
     */
    public ParadiseBJ() {
        initComponents();
        establecerIcono(RUTA_ICONO);
        setSize(ANCHO, LARGO);
        setTitle(TITULO);
        getContentPane().setBackground(COLOR_FONDO);
        setLocationRelativeTo(null);
        setLayout(null);
        setVisible(true);
        setPreferredSize(new Dimension(ANCHO, LARGO));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
    }
    public void setJugador(Cliente jugador){
        this.jugador = jugador;
        fichasJugador = jugador.fichas;
        jugador1 = new Jugador("Cliente", fichasJugador);
    }
    public void setCasino(Casino casino){
        this.casino = casino;
    }
    public void setDetector(Deteccion detector){
        this.detector = detector;
    }
    @Override
    public void establecerIcono(String ruta){
        Image icon = new ImageIcon(getClass().getResource(ruta)).getImage();
        this.setIconImage(icon);
    }
    
    @Override
    public void desplegar(){
        this.setVisible(true);
    }
    
    @Override
    public void esconder(){
        this.setVisible(false);
    }
    
    @Override
    public void cerrar(){
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
    
    @Override
    public void cambiarPanel(JPanel panel){
        setContentPane(panel);
        repaint();
        revalidate();
        detector.setBoton(false);
        detector.setOpcion(-1);
    }
    
    private static Baraja miBaraja = new Baraja(1, true);
    private static Jugador jugador1;
    private static Jugador dealer = new Jugador("Dealer");

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iniciaButton = new javax.swing.JButton();
        pideButton = new javax.swing.JButton();
        quedaButton = new javax.swing.JButton();
        apuestaButton = new javax.swing.JButton();
        volverJugarButton = new javax.swing.JButton();
        decorCard1 = new javax.swing.JLabel();
        decorCard2 = new javax.swing.JLabel();
        ResultadoFinal = new javax.swing.JInternalFrame();
        okResultadoFinal = new javax.swing.JButton();
        textoResultadoFinal = new javax.swing.JLabel();
        cantidadApostada = new javax.swing.JInternalFrame();
        ok_Apuesta = new javax.swing.JButton();
        cantidadDisplay = new javax.swing.JLabel();
        AsPicas = new javax.swing.JLabel();
        DosPicas = new javax.swing.JLabel();
        TresPicas = new javax.swing.JLabel();
        CuatroPicas = new javax.swing.JLabel();
        CincoPicas = new javax.swing.JLabel();
        SeisPicas = new javax.swing.JLabel();
        SietePicas = new javax.swing.JLabel();
        OchoPicas = new javax.swing.JLabel();
        NuevePicas = new javax.swing.JLabel();
        DiezPicas = new javax.swing.JLabel();
        JotaPicas = new javax.swing.JLabel();
        ReinaPicas = new javax.swing.JLabel();
        ReyPicas = new javax.swing.JLabel();
        AsCorazones = new javax.swing.JLabel();
        DosCorazones = new javax.swing.JLabel();
        TresCorazones = new javax.swing.JLabel();
        CuatroCorazones = new javax.swing.JLabel();
        CincoCorazones = new javax.swing.JLabel();
        SeisCorazones = new javax.swing.JLabel();
        SieteCorazones = new javax.swing.JLabel();
        OchoCorazones = new javax.swing.JLabel();
        NueveCorazones = new javax.swing.JLabel();
        DiezCorazones = new javax.swing.JLabel();
        JotaCorazones = new javax.swing.JLabel();
        ReinaCorazones = new javax.swing.JLabel();
        ReyCorazones = new javax.swing.JLabel();
        AsTreboles = new javax.swing.JLabel();
        DosTreboles = new javax.swing.JLabel();
        TresTreboles = new javax.swing.JLabel();
        CuatroTreboles = new javax.swing.JLabel();
        CincoTreboles = new javax.swing.JLabel();
        SeisTreboles = new javax.swing.JLabel();
        SieteTreboles = new javax.swing.JLabel();
        OchoTreboles = new javax.swing.JLabel();
        NueveTreboles = new javax.swing.JLabel();
        DiezTreboles = new javax.swing.JLabel();
        JotaTreboles = new javax.swing.JLabel();
        ReinaTreboles = new javax.swing.JLabel();
        ReyTreboles = new javax.swing.JLabel();
        AsDiamantes = new javax.swing.JLabel();
        DosDiamantes = new javax.swing.JLabel();
        TresDiamantes = new javax.swing.JLabel();
        CuatroDiamantes = new javax.swing.JLabel();
        CincoDiamantes = new javax.swing.JLabel();
        SeisDiamantes = new javax.swing.JLabel();
        SieteDiamantes = new javax.swing.JLabel();
        OchoDiamantes = new javax.swing.JLabel();
        NueveDiamantes = new javax.swing.JLabel();
        DiezDiamantes = new javax.swing.JLabel();
        JotaDiamantes = new javax.swing.JLabel();
        ReinaDiamantes = new javax.swing.JLabel();
        ReyDiamantes = new javax.swing.JLabel();
        temp2 = new javax.swing.JButton();
        dealerPrimera = new javax.swing.JLabel();
        decorCard4 = new javax.swing.JLabel();
        temp3 = new javax.swing.JButton();
        TerminaBJ = new javax.swing.JButton();
        cantidadApuesta = new javax.swing.JTextField();
        saldoJugadorActual = new javax.swing.JLabel();
        Mesa = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Paradise BlackJack");
        setSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        iniciaButton.setText("Inicia");
        iniciaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(iniciaButton);
        iniciaButton.setBounds(320, 220, 140, 30);

        pideButton.setText("Pide");
        pideButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pideButtonActionPerformed(evt);
            }
        });
        getContentPane().add(pideButton);
        pideButton.setBounds(60, 500, 80, 23);
        pideButton.setVisible(false);

        quedaButton.setText("Queda");
        quedaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quedaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(quedaButton);
        quedaButton.setBounds(150, 500, 90, 23);
        quedaButton.setVisible(false);

        apuestaButton.setText("Apuesta");
        apuestaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apuestaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(apuestaButton);
        apuestaButton.setBounds(260, 500, 100, 23);
        apuestaButton.setVisible(false);

        volverJugarButton.setText("Volver a jugar");
        volverJugarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverJugarButtonActionPerformed(evt);
            }
        });
        getContentPane().add(volverJugarButton);
        volverJugarButton.setBounds(30, 20, 120, 40);
        volverJugarButton.setVisible(false);

        decorCard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/back_card_blue.png"))); // NOI18N
        getContentPane().add(decorCard1);
        decorCard1.setBounds(270, 30, 60, 90);

        decorCard2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/back_card_blue.png"))); // NOI18N
        getContentPane().add(decorCard2);
        decorCard2.setBounds(260, 20, 60, 90);

        ResultadoFinal.setVisible(true);
        ResultadoFinal.getContentPane().setLayout(null);

        okResultadoFinal.setText("Ok");
        okResultadoFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okResultadoFinalActionPerformed(evt);
            }
        });
        ResultadoFinal.getContentPane().add(okResultadoFinal);
        okResultadoFinal.setBounds(100, 100, 90, 23);

        textoResultadoFinal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoResultadoFinal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ResultadoFinal.getContentPane().add(textoResultadoFinal);
        textoResultadoFinal.setBounds(0, 0, 274, 120);

        getContentPane().add(ResultadoFinal);
        ResultadoFinal.setBounds(260, 260, 290, 190);
        ResultadoFinal.setVisible(false);

        cantidadApostada.setClosable(true);
        cantidadApostada.setVisible(true);
        cantidadApostada.getContentPane().setLayout(null);

        ok_Apuesta.setText("Ok");
        ok_Apuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_ApuestaActionPerformed(evt);
            }
        });
        cantidadApostada.getContentPane().add(ok_Apuesta);
        ok_Apuesta.setBounds(110, 60, 60, 30);

        cantidadDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cantidadDisplay.setText("HOLO");
        cantidadApostada.getContentPane().add(cantidadDisplay);
        cantidadDisplay.setBounds(0, 0, 270, 100);

        getContentPane().add(cantidadApostada);
        cantidadApostada.setBounds(230, 270, 290, 180);
        cantidadApostada.setVisible(false);

        AsPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/As_Picas.png"))); // NOI18N
        getContentPane().add(AsPicas);
        AsPicas.setBounds(720, 20, 60, 90);
        AsPicas.setVisible(false);

        DosPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Dos_Picas.png"))); // NOI18N
        getContentPane().add(DosPicas);
        DosPicas.setBounds(700, 20, 60, 90);
        DosPicas.setVisible(false);

        TresPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Tres_Picas.png"))); // NOI18N
        getContentPane().add(TresPicas);
        TresPicas.setBounds(680, 20, 60, 90);
        TresPicas.setVisible(false);

        CuatroPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cuatro_Picas.png"))); // NOI18N
        getContentPane().add(CuatroPicas);
        CuatroPicas.setBounds(660, 20, 60, 90);
        CuatroPicas.setVisible(false);

        CincoPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cinco_Picas.png"))); // NOI18N
        getContentPane().add(CincoPicas);
        CincoPicas.setBounds(640, 20, 60, 90);
        CincoPicas.setVisible(false);

        SeisPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Seis_Picas.png"))); // NOI18N
        getContentPane().add(SeisPicas);
        SeisPicas.setBounds(620, 20, 60, 90);
        SeisPicas.setVisible(false);

        SietePicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Siete_Picas.png"))); // NOI18N
        getContentPane().add(SietePicas);
        SietePicas.setBounds(600, 20, 60, 90);
        SietePicas.setVisible(false);

        OchoPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Ocho_Picas.png"))); // NOI18N
        getContentPane().add(OchoPicas);
        OchoPicas.setBounds(580, 20, 60, 90);
        OchoPicas.setVisible(false);

        NuevePicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Nueve_Picas.png"))); // NOI18N
        getContentPane().add(NuevePicas);
        NuevePicas.setBounds(560, 20, 60, 90);
        NuevePicas.setVisible(false);

        DiezPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Diez_Picas.png"))); // NOI18N
        getContentPane().add(DiezPicas);
        DiezPicas.setBounds(540, 20, 60, 90);
        DiezPicas.setVisible(false);

        JotaPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Jota_Picas.png"))); // NOI18N
        getContentPane().add(JotaPicas);
        JotaPicas.setBounds(520, 20, 60, 90);
        JotaPicas.setVisible(false);

        ReinaPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Reina_Picas.png"))); // NOI18N
        getContentPane().add(ReinaPicas);
        ReinaPicas.setBounds(500, 20, 60, 90);
        ReinaPicas.setVisible(false);

        ReyPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Rey_Picas.png"))); // NOI18N
        getContentPane().add(ReyPicas);
        ReyPicas.setBounds(480, 20, 60, 90);
        ReyPicas.setVisible(false);

        AsCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/As_Corazones.png"))); // NOI18N
        getContentPane().add(AsCorazones);
        AsCorazones.setBounds(720, 20, 60, 90);
        AsCorazones.setVisible(false);

        DosCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Dos_Corazones.png"))); // NOI18N
        getContentPane().add(DosCorazones);
        DosCorazones.setBounds(700, 20, 60, 90);
        DosCorazones.setVisible(false);

        TresCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Tres_Corazones.png"))); // NOI18N
        getContentPane().add(TresCorazones);
        TresCorazones.setBounds(680, 20, 60, 90);
        TresCorazones.setVisible(false);

        CuatroCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cuatro_Corazones.png"))); // NOI18N
        getContentPane().add(CuatroCorazones);
        CuatroCorazones.setBounds(660, 20, 60, 90);
        CuatroCorazones.setVisible(false);

        CincoCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cinco_Corazones.png"))); // NOI18N
        getContentPane().add(CincoCorazones);
        CincoCorazones.setBounds(640, 20, 60, 90);
        CincoCorazones.setVisible(false);

        SeisCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Seis_Corazones.png"))); // NOI18N
        getContentPane().add(SeisCorazones);
        SeisCorazones.setBounds(620, 20, 60, 90);
        SeisCorazones.setVisible(false);

        SieteCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Siete_Corazones.png"))); // NOI18N
        getContentPane().add(SieteCorazones);
        SieteCorazones.setBounds(600, 20, 60, 90);
        SieteCorazones.setVisible(false);

        OchoCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Ocho_Corazones.png"))); // NOI18N
        getContentPane().add(OchoCorazones);
        OchoCorazones.setBounds(580, 20, 60, 90);
        OchoCorazones.setVisible(false);

        NueveCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Nueve_Corazones.png"))); // NOI18N
        getContentPane().add(NueveCorazones);
        NueveCorazones.setBounds(560, 20, 60, 90);
        NueveCorazones.setVisible(false);

        DiezCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Diez_Corazones.png"))); // NOI18N
        getContentPane().add(DiezCorazones);
        DiezCorazones.setBounds(540, 20, 60, 90);
        DiezCorazones.setVisible(false);

        JotaCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Jota_Corazones.png"))); // NOI18N
        getContentPane().add(JotaCorazones);
        JotaCorazones.setBounds(520, 20, 60, 90);
        JotaCorazones.setVisible(false);

        ReinaCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Reina_Corazones.png"))); // NOI18N
        getContentPane().add(ReinaCorazones);
        ReinaCorazones.setBounds(500, 20, 60, 90);
        ReinaCorazones.setVisible(false);

        ReyCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Rey_Corazones.png"))); // NOI18N
        getContentPane().add(ReyCorazones);
        ReyCorazones.setBounds(480, 20, 60, 90);
        ReyCorazones.setVisible(false);

        AsTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/As_Treboles.png"))); // NOI18N
        getContentPane().add(AsTreboles);
        AsTreboles.setBounds(720, 20, 60, 90);
        AsTreboles.setVisible(false);

        DosTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Dos_Treboles.png"))); // NOI18N
        getContentPane().add(DosTreboles);
        DosTreboles.setBounds(700, 20, 60, 90);
        DosTreboles.setVisible(false);

        TresTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Tres_Treboles.png"))); // NOI18N
        getContentPane().add(TresTreboles);
        TresTreboles.setBounds(680, 20, 60, 90);
        TresTreboles.setVisible(false);

        CuatroTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cuatro_Treboles.png"))); // NOI18N
        getContentPane().add(CuatroTreboles);
        CuatroTreboles.setBounds(660, 20, 60, 90);
        CuatroTreboles.setVisible(false);

        CincoTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cinco_Treboles.png"))); // NOI18N
        getContentPane().add(CincoTreboles);
        CincoTreboles.setBounds(640, 20, 60, 90);
        CincoTreboles.setVisible(false);

        SeisTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Seis_Treboles.png"))); // NOI18N
        SeisTreboles.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(SeisTreboles);
        SeisTreboles.setBounds(620, 20, 60, 90);
        SeisTreboles.setVisible(false);

        SieteTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Siete_Treboles.png"))); // NOI18N
        getContentPane().add(SieteTreboles);
        SieteTreboles.setBounds(600, 20, 60, 90);
        SieteTreboles.setVisible(false);

        OchoTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Ocho_Treboles.png"))); // NOI18N
        getContentPane().add(OchoTreboles);
        OchoTreboles.setBounds(580, 20, 60, 90);
        OchoTreboles.setVisible(false);

        NueveTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Nueve_Treboles.png"))); // NOI18N
        getContentPane().add(NueveTreboles);
        NueveTreboles.setBounds(560, 20, 60, 90);
        NueveTreboles.setVisible(false);

        DiezTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Diez_Treboles.png"))); // NOI18N
        getContentPane().add(DiezTreboles);
        DiezTreboles.setBounds(540, 20, 60, 90);
        DiezTreboles.setVisible(false);

        JotaTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Jota_Treboles.png"))); // NOI18N
        getContentPane().add(JotaTreboles);
        JotaTreboles.setBounds(520, 20, 60, 90);
        JotaTreboles.setVisible(false);

        ReinaTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Reina_Treboles.png"))); // NOI18N
        getContentPane().add(ReinaTreboles);
        ReinaTreboles.setBounds(500, 20, 60, 90);
        ReinaTreboles.setVisible(false);

        ReyTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Rey_Treboles.png"))); // NOI18N
        getContentPane().add(ReyTreboles);
        ReyTreboles.setBounds(480, 20, 60, 90);
        ReyTreboles.setVisible(false);

        AsDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/As_Diamantes.png"))); // NOI18N
        getContentPane().add(AsDiamantes);
        AsDiamantes.setBounds(720, 20, 60, 90);
        AsDiamantes.setVisible(false);

        DosDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Dos_Diamantes.png"))); // NOI18N
        getContentPane().add(DosDiamantes);
        DosDiamantes.setBounds(700, 20, 60, 90);
        DosDiamantes.setVisible(false);

        TresDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Tres_Diamantes.png"))); // NOI18N
        getContentPane().add(TresDiamantes);
        TresDiamantes.setBounds(680, 20, 60, 90);
        TresDiamantes.setVisible(false);

        CuatroDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cuatro_Diamantes.png"))); // NOI18N
        getContentPane().add(CuatroDiamantes);
        CuatroDiamantes.setBounds(660, 20, 60, 90);
        CuatroDiamantes.setVisible(false);

        CincoDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cinco_Diamantes.png"))); // NOI18N
        getContentPane().add(CincoDiamantes);
        CincoDiamantes.setBounds(640, 20, 60, 90);
        CincoDiamantes.setVisible(false);

        SeisDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Seis_Diamantes.png"))); // NOI18N
        getContentPane().add(SeisDiamantes);
        SeisDiamantes.setBounds(620, 20, 60, 90);
        SeisDiamantes.setVisible(false);

        SieteDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Siete_Diamantes.png"))); // NOI18N
        getContentPane().add(SieteDiamantes);
        SieteDiamantes.setBounds(600, 20, 60, 90);
        SieteDiamantes.setVisible(false);

        OchoDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Ocho_Diamantes.png"))); // NOI18N
        getContentPane().add(OchoDiamantes);
        OchoDiamantes.setBounds(580, 20, 60, 90);
        OchoDiamantes.setVisible(false);

        NueveDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Nueve_Diamantes.png"))); // NOI18N
        getContentPane().add(NueveDiamantes);
        NueveDiamantes.setBounds(560, 20, 60, 90);
        NueveDiamantes.setVisible(false);

        DiezDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Diez_Diamantes.png"))); // NOI18N
        getContentPane().add(DiezDiamantes);
        DiezDiamantes.setBounds(540, 20, 60, 90);
        DiezDiamantes.setVisible(false);

        JotaDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Jota_Diamantes.png"))); // NOI18N
        getContentPane().add(JotaDiamantes);
        JotaDiamantes.setBounds(520, 20, 60, 90);
        JotaDiamantes.setVisible(false);

        ReinaDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Reina_Diamantes.png"))); // NOI18N
        getContentPane().add(ReinaDiamantes);
        ReinaDiamantes.setBounds(500, 20, 60, 90);
        ReinaDiamantes.setVisible(false);

        ReyDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Rey_Diamantes.png"))); // NOI18N
        getContentPane().add(ReyDiamantes);
        ReyDiamantes.setBounds(480, 20, 60, 90);
        ReyDiamantes.setVisible(false);

        temp2.setText("Primera");
        temp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temp2ActionPerformed(evt);
            }
        });
        getContentPane().add(temp2);
        temp2.setBounds(660, 470, 110, 30);
        temp2.setVisible(false);

        dealerPrimera.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/back_card_blue.png"))); // NOI18N
        getContentPane().add(dealerPrimera);
        dealerPrimera.setBounds(220, 150, 60, 90);
        dealerPrimera.setVisible(false);

        decorCard4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/back_card_blue.png"))); // NOI18N
        getContentPane().add(decorCard4);
        decorCard4.setBounds(60, 390, 60, 90);
        decorCard4.setVisible(false);

        temp3.setText("Dealer");
        temp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temp3ActionPerformed(evt);
            }
        });
        getContentPane().add(temp3);
        temp3.setBounds(510, 480, 110, 30);
        temp3.setVisible(false);

        TerminaBJ.setText("Termina");
        TerminaBJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TerminaBJActionPerformed(evt);
            }
        });
        getContentPane().add(TerminaBJ);
        TerminaBJ.setBounds(60, 220, 110, 23);
        TerminaBJ.setVisible(false);

        cantidadApuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantidadApuestaActionPerformed(evt);
            }
        });
        getContentPane().add(cantidadApuesta);
        cantidadApuesta.setBounds(370, 500, 100, 30);
        cantidadApuesta.setVisible(false);

        saldoJugadorActual.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        saldoJugadorActual.setForeground(new java.awt.Color(255, 255, 255));
        saldoJugadorActual.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(saldoJugadorActual);
        saldoJugadorActual.setBounds(580, 300, 160, 50);

        Mesa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/mesa_buena_2.png"))); // NOI18N
        getContentPane().add(Mesa);
        Mesa.setBounds(0, 0, 800, 600);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void pideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pideButtonActionPerformed
        // TODO add your handling code here:
        int sumaJugador = jugador1.getJugadorSuma();
                
        
        if (sumaJugador > 21){
            manoDealer(true);
            pideButton.setVisible(false);
            quedaButton.setVisible(false);
            apuestaButton.setVisible(false);
            cantidadApuesta.setVisible(false);
            jugador1.actualizaQueda(true);
            int dealerSuma = dealer.sumaMano();
            dealerSuma = turnoDealer(false, dealerSuma);
        } else {
            pideCarta();
            manoJugador();
        }
    }//GEN-LAST:event_pideButtonActionPerformed

    private void quedaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quedaButtonActionPerformed
        // TODO add your handling code here:
        
        pideButton.setVisible(false);
        quedaButton.setVisible(false);
        apuestaButton.setVisible(false);
        cantidadApuesta.setVisible(false);
        jugador1.actualizaQueda(true);
        int dealerSuma = turnoDealer(false, dealer.getJugadorSuma());
        manoDealer(true);
        TerminaBJ.setVisible(true);
    }//GEN-LAST:event_quedaButtonActionPerformed

    private void apuestaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apuestaButtonActionPerformed
        // TODO add your handling code here:
        try {
            int cantidad = Integer.parseInt(cantidadApuesta.getText().trim());
            int saldoActual = getSaldoJugador();
            totalApostado += cantidad;
            if (saldoActual >= cantidad && cantidad <= saldoActual*(jugador.apuestaMax * 100)) {

                apostar(cantidad);
                cantidadDisplay.setText("Cantidad apostada: "+String.valueOf(cantidad));
                cantidadApostada.setVisible(true);
                manoJugador();
                manoDealer(false);
                saldoActual = getSaldoJugador();
                saldoJugadorActual.setText("Saldo: "+String.valueOf(saldoActual));
            } else {
                cantidadDisplay.setText("Insuficiente saldo");
                cantidadApostada.setVisible(true);
            }
        } catch (NumberFormatException nfe) { }
    }//GEN-LAST:event_apuestaButtonActionPerformed

    private void volverJugarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverJugarButtonActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_volverJugarButtonActionPerformed

    private void temp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temp2ActionPerformed
        // TODO add your handling code here:
        manoJugador();
    }//GEN-LAST:event_temp2ActionPerformed

    private void temp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temp3ActionPerformed
        // TODO add your handling code here:
        manoDealer(false);
    }//GEN-LAST:event_temp3ActionPerformed

    private void ok_ApuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_ApuestaActionPerformed
        // TODO add your handling code here:
        cantidadApostada.setVisible(false);
    }//GEN-LAST:event_ok_ApuestaActionPerformed

    private void TerminaBJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TerminaBJActionPerformed
        // TODO add your handling code here:
        //Jugador jugador1 = getJugador();
        //Jugador dealer = getDealer();
        ResultadoFinal.setVisible(true);
        int resultValue = jugadorGana();
        if(resultValue==1) {
            textoResultadoFinal.setText("Empate");
        } else if(resultValue==2) {
            textoResultadoFinal.setText("Jugador gana");
            jugador.fichas += jugador.bono*totalApostado;
            casino.sumaBlackjack((int)(-1*jugador.bono*totalApostado));
        } else if (resultValue==3) {
            jugador.fichas -= totalApostado;
            casino.sumaBlackjack((int)(totalApostado));
            textoResultadoFinal.setText("Jugador pierde");
        }
        //jugador.fichas += ganado perdido:
    //jugador.bono;
    //jugador.apuestaMax*100;
    //casino.sumaBlackjack(monto ganado);
    
    }//GEN-LAST:event_TerminaBJActionPerformed

    private void okResultadoFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okResultadoFinalActionPerformed
        // TODO add your handling code here:
        ResultadoFinal.setVisible(false);
        detector.setBoton();
    }//GEN-LAST:event_okResultadoFinalActionPerformed

    private void cantidadApuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantidadApuestaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cantidadApuestaActionPerformed

    private void iniciaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciaButtonActionPerformed
        // TODO add your handling code here:
        primeraRonda();
        manoJugador();
        manoDealer(false);
        saldoJugadorActual.setText("Saldo: "+jugador1.getSaldo());
        saldoJugadorActual.setVisible(true);
        pideButton.setVisible(true);
        quedaButton.setVisible(true);
        apuestaButton.setVisible(true);
        cantidadApuesta.setVisible(true);
        iniciaButton.setVisible(false);
    }//GEN-LAST:event_iniciaButtonActionPerformed

    /**
     * Arranca todo el blackjack.
     */
    public void inicia() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParadiseBJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParadiseBJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParadiseBJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParadiseBJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParadiseBJ().setVisible(true);    
            }
        });
      
    }
    
    /**
     * Metodo para iniciar el juego de Black Jack.
     */
    public void iniciaBJ() {
//      primeraRonda();
        int result = iniciaBlackJack();
        
        finalPartida(result);
//        Jugador jugador1 = getJugador();
        
    }
    
    /**
     * Metodo para decidir quien gana.
     * @param result    Un valor que establece quien gano.
     */
    public void finalPartida(int result) {
        ResultadoFinal.setVisible(true);
        if(result==1) {
            textoResultadoFinal.setText("Empate");
        } else if(result==2) {
            textoResultadoFinal.setText("Jugador gana");
        } else if (result==3) {
            textoResultadoFinal.setText("Jugador pierde");
        }
    }
    
    /**
     * Metodo para mostrar la mano del jugador.
     */
    public void manoJugador() {
        ArrayList<Naipe> manoJugador = getManoJugador();
        int xJugador = 60;
        int yJugador = 390;
        
        for (Naipe n : manoJugador) {
            checaNaipe(n, xJugador, yJugador);
            xJugador += 70;
        }
    }
    
    /**
     * Metodo para mostrar la mano del dealer.
     * @param muestraPrimera    Si muestra la primera carta o no.
     */
    public void manoDealer(boolean muestraPrimera) {
        ArrayList<Naipe> manoDealer = getManoDealer();
        int xDealer = 220;
        int yDealer = 150;
        int sizeMano = manoDealer.size();
        
        if (muestraPrimera) {
            for (int i=0; i<sizeMano; i++) {
                checaNaipe(manoDealer.get(i), xDealer, yDealer);
                xDealer += 70;
            }
        } else {
            dealerPrimera.setVisible(true);
            checaNaipe(manoDealer.get(1), xDealer + 70, yDealer);
        }
        
    }
    
    /**
     * Metodo para mostrar el naipe en la ubicacion deseada.
     * @param n El naipe a mostrar.
     * @param x La coordenada en X.
     * @param y La coordenada en Y.
     */
    public void checaNaipe(Naipe n, int x, int y) {
        if (n.getPalo().equals("Treboles")) {
            switch (n.getNumero()) {
                case 1:
                    AsTreboles.setVisible(true);
                    AsTreboles.setBounds(x, y, 60, 90);
                    break;
                case 2:
                    DosTreboles.setVisible(true);
                    DosTreboles.setBounds(x, y, 60, 90);
                    break;
                case 3:
                    TresTreboles.setVisible(true);
                    TresTreboles.setBounds(x, y, 60, 90);
                    break;
                case 4:
                    CuatroTreboles.setVisible(true);
                    CuatroTreboles.setBounds(x, y, 60, 90);
                    break;
                case 5:
                    CincoTreboles.setVisible(true);
                    CincoTreboles.setBounds(x, y, 60, 90);
                    break;
                case 6:
                    SeisTreboles.setVisible(true);
                    SeisTreboles.setBounds(x, y, 60, 90);
                    break;
                case 7:
                    SieteTreboles.setVisible(true);
                    SieteTreboles.setBounds(x, y, 60, 90);
                    break;
                case 8:
                    OchoTreboles.setVisible(true);
                    OchoTreboles.setBounds(x, y, 60, 90);
                    break;
                case 9:
                    NueveTreboles.setVisible(true);
                    NueveTreboles.setBounds(x, y, 60, 90);
                    break;
                case 10:
                    DiezTreboles.setVisible(true);
                    DiezTreboles.setBounds(x, y, 60, 90);
                    break;
                case 11:
                    JotaTreboles.setVisible(true);
                    JotaTreboles.setBounds(x, y, 60, 90);
                    break;
                case 12:
                    ReinaTreboles.setVisible(true);
                    ReinaTreboles.setBounds(x, y, 60, 90);
                    break;
                case 13:
                    ReyTreboles.setVisible(true);
                    ReyTreboles.setBounds(x, y, 60, 90);
                    break;
            }
        } else if (n.getPalo().equals("Diamantes")) {
            switch (n.getNumero()) {
                case 1:
                    AsDiamantes.setVisible(true);
                    AsDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 2:
                    DosDiamantes.setVisible(true);
                    DosDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 3:
                    TresDiamantes.setVisible(true);
                    TresDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 4:
                    CuatroDiamantes.setVisible(true);
                    CuatroDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 5:
                    CincoDiamantes.setVisible(true);
                    CincoDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 6:
                    SeisDiamantes.setVisible(true);
                    SeisDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 7:
                    SieteDiamantes.setVisible(true);
                    SieteDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 8:
                    OchoDiamantes.setVisible(true);
                    OchoDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 9:
                    NueveDiamantes.setVisible(true);
                    NueveDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 10:
                    DiezDiamantes.setVisible(true);
                    DiezDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 11:
                    JotaDiamantes.setVisible(true);
                    JotaDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 12:
                    ReinaDiamantes.setVisible(true);
                    ReinaDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 13:
                    ReyDiamantes.setVisible(true);
                    ReyDiamantes.setBounds(x, y, 60, 90);
                    break;
            }
        } else if(n.getPalo().equals("Picas")) {
            switch (n.getNumero()) {
                case 1:
                    AsPicas.setVisible(true);
                    AsPicas.setBounds(x, y, 60, 90);
                    break;
                case 2:
                    DosPicas.setVisible(true);
                    DosPicas.setBounds(x, y, 60, 90);
                    break;
                case 3:
                    TresPicas.setVisible(true);
                    TresPicas.setBounds(x, y, 60, 90);
                    break;
                case 4:
                    CuatroPicas.setVisible(true);
                    CuatroPicas.setBounds(x, y, 60, 90);
                    break;
                case 5:
                    CincoPicas.setVisible(true);
                    CincoPicas.setBounds(x, y, 60, 90);
                    break;
                case 6:
                    SeisPicas.setVisible(true);
                    SeisPicas.setBounds(x, y, 60, 90);
                    break;
                case 7:
                    SietePicas.setVisible(true);
                    SietePicas.setBounds(x, y, 60, 90);
                    break;
                case 8:
                    OchoPicas.setVisible(true);
                    OchoPicas.setBounds(x, y, 60, 90);
                    break;
                case 9:
                    NuevePicas.setVisible(true);
                    NuevePicas.setBounds(x, y, 60, 90);
                    break;
                case 10:
                    DiezPicas.setVisible(true);
                    DiezPicas.setBounds(x, y, 60, 90);
                    break;
                case 11:
                    JotaPicas.setVisible(true);
                    JotaPicas.setBounds(x, y, 60, 90);
                    break;
                case 12:
                    ReinaPicas.setVisible(true);
                    ReinaPicas.setBounds(x, y, 60, 90);
                    break;
                case 13:
                    ReyPicas.setVisible(true);
                    ReyPicas.setBounds(x, y, 60, 90);
                    break;
            }
        } else if (n.getPalo().equals("Corazones")) {
            switch (n.getNumero()) {
                case 1:
                    AsCorazones.setVisible(true);
                    AsCorazones.setBounds(x, y, 60, 90);
                    break;
                case 2:
                    DosCorazones.setVisible(true);
                    DosCorazones.setBounds(x, y, 60, 90);
                    break;
                case 3:
                    TresCorazones.setVisible(true);
                    TresCorazones.setBounds(x, y, 60, 90);
                    break;
                case 4:
                    CuatroCorazones.setVisible(true);
                    CuatroCorazones.setBounds(x, y, 60, 90);
                    break;
                case 5:
                    CincoCorazones.setVisible(true);
                    CincoCorazones.setBounds(x, y, 60, 90);
                    break;
                case 6:
                    SeisCorazones.setVisible(true);
                    SeisCorazones.setBounds(x, y, 60, 90);
                    break;
                case 7:
                    SieteCorazones.setVisible(true);
                    SieteCorazones.setBounds(x, y, 60, 90);
                    break;
                case 8:
                    OchoCorazones.setVisible(true);
                    OchoCorazones.setBounds(x, y, 60, 90);
                    break;
                case 9:
                    NueveCorazones.setVisible(true);
                    NueveCorazones.setBounds(x, y, 60, 90);
                    break;
                case 10:
                    DiezCorazones.setVisible(true);
                    DiezCorazones.setBounds(x, y, 60, 90);
                    break;
                case 11:
                    JotaCorazones.setVisible(true);
                    JotaCorazones.setBounds(x, y, 60, 90);
                    break;
                case 12:
                    ReinaCorazones.setVisible(true);
                    ReinaCorazones.setBounds(x, y, 60, 90);
                    break;
                case 13:
                    ReyCorazones.setVisible(true);
                    ReyCorazones.setBounds(x, y, 60, 90);
                    break;
            }
        }
    }
    
    
    
    /**
     * Metodo para simular la primera ronda.
     */
    public void primeraRonda() {
        
        jugador1.agregarNaipe(miBaraja.sacarNaipe());
        dealer.agregarNaipe(miBaraja.sacarNaipe());
        jugador1.agregarNaipe(miBaraja.sacarNaipe());
        dealer.agregarNaipe(miBaraja.sacarNaipe());
    }

    /**
     * Metodo para iniciar el juego de Black Jack.
     * @return  Un entero que dictamina quien gano.
     */
    public int iniciaBlackJack() {

           primeraRonda();

        // Mostrar la primera ronda
//        System.out.println("Ronda servida");
//        jugador1.mostrarMano(true);
//        dealer.mostrarMano(false);
//        System.out.println("\n");
//        jugador1.agregarNaipe(miBaraja.sacarNaipe());
//        dealer.agregarNaipe(miBaraja.sacarNaipe());
//        jugador1.agregarNaipe(miBaraja.sacarNaipe());
//        dealer.agregarNaipe(miBaraja.sacarNaipe());

        // Quedarse con la mano
        boolean jugadorStays = jugador1.getJugadorStays();
        boolean dealerStays = false;

        int jugadorSuma = jugador1.sumaMano();
        int dealerSuma = dealer.sumaMano();
        
        //Turno jugador
//        System.out.println("Suma jugador --> "+jugadorSuma);
        while (jugadorSuma <= 21) {
            jugadorSuma = turnoJugador();
            jugadorStays = turnoJugadorBool();
            if (jugadorStays)
                break;
        }

//        System.out.println();
        // Turno del dealer
        
        if (jugadorSuma <= 21 && jugadorStays) {
            dealerSuma = turnoDealer(dealerStays, dealerSuma);
        }
        
//        System.out.println("\n");
//        jugador1.mostrarMano(true);
//        System.out.println("\tSUMA:  "+jugadorSuma);
//        dealer.mostrarMano(true);
//        System.out.println("\tSUMA:   "+dealerSuma);


//        System.out.println();
//
//        if (jugadorSuma == dealerSuma) {
//            System.out.println("Empate, se regresan las apuestas");
//        }
//        else if (dealerSuma>21 || jugadorSuma>dealerSuma && jugadorSuma<=21) {
//            System.out.println("\t\tJugador gana");
//                }
//        else if (dealerSuma<= 21 || jugadorSuma>21) {
//            System.out.println("\t\tLa casa gana");
//                }
//        
//        boolean terminaJuego = true;
        
        return jugadorGana();

    } // Fin juego

    
    /**
     * Metodo para actualizar la suma de la mano del jugador.
     * @return La suma de la mano actual.
     */
    public int turnoJugador() {
               
        // Si el jugador pide
//        if (true) {
//
//             Agrega una carta y almacena si se paso
//
//            jugador1.mostrarMano(true);
//            jugadorSuma = jugador1.sumaMano();
//        } else {
//            jugadorStays = true;
//        }
        jugador1.actualizaSuma();
        return jugador1.getJugadorSuma();
    }
    
    /**
     * Metodo para actualizar si el jugador decide quedarse con su mano actual.
     * @return Si el jugador queda o no.
     */
    public boolean turnoJugadorBool() {
        return jugador1.getJugadorStays();
    }
     
//    public void pideCarta(boolean jugadorStays) {
//        
//        while (!jugadorStays && jugador1.sumaMano() <= 21) {
//            jugadorStays = !jugador1.agregarNaipe(miBaraja.sacarNaipe());
//        }
//            System.out.println("Carta! plz");
//            jugador1.mostrarMano(true);
//        
//        
//        //return jugadorStays;
//    }
    
    /**
     * Metodo para cuando se presiona el boton de pedir carta para el jugador.
     * @return el número de la suma.
     */
    public int pideCarta() {
        
        jugador1.agregarNaipe(miBaraja.sacarNaipe());

//        System.out.println("Carta! plz");
//        jugador1.mostrarMano(true);
        
//        jugador1.actualizaSuma();
//        System.out.println("Suma: "+jugador1.getJugadorSuma());

        
        //return jugadorStays;
        return jugador1.getJugadorSuma();
    }
    
    /**
     * Metodo para cuando se presiona el boton de apostar para el jugador.
     * @param cantidad la cantidad que se desea apostar.
     */
    public void apostar(int cantidad) {
        int nuevoSaldo = jugador1.getSaldo();
        if(nuevoSaldo > 0 && nuevoSaldo >= cantidad) {
            nuevoSaldo -= cantidad;
            jugador1.actualizaSaldo(nuevoSaldo);
        }
        else
            System.out.println("Imposible apostar esa cantidad");
    }
    
    /**
     * Metodo para simular el turno del dealer.
     * @param dealerStays   Si el dealer se queda con su mano actual o no.
     * @param dealerSuma    La suma de la mano actual del dealer.
     * @return              La suma de la mano actual del dealer.
     */
    public int turnoDealer(boolean dealerStays, int dealerSuma) {
        while (!dealerStays) {
            if (dealer.sumaMano() < 17) {
//                System.out.println("\tSUMA: "+dealerSuma);
//                System.out.println("\tDealer pide");
                dealerStays = !dealer.agregarNaipe(miBaraja.sacarNaipe());
                dealer.mostrarMano(true);
                dealerSuma = dealer.sumaMano();
            } else {
//                System.out.println("Dealer queda");
                dealerStays = true;
            }

        }
        dealerSuma = dealer.sumaMano();
        return dealerSuma;
    }
    
    /**
     * Metodo para obtener la mano del jugador.
     * @return  La mano del jugador.
     */
    public ArrayList<Naipe> getManoJugador() {
        return jugador1.getMano();
    }
    
    /**
     * Metodo para obtener la mano del dealer.
     * @return  La mano del dealer.
     */
    public ArrayList<Naipe> getManoDealer() {
        return dealer.getMano();
    }
    
    /**
     * Metodo para determinar si el jugador gano.
     * @return              Un entero que dictamina quien gano.
     */
    public int jugadorGana() {
        int jugadorSuma = jugador1.getJugadorSuma();
        int dealerSuma = dealer.getJugadorSuma();
        if (jugadorSuma == dealerSuma) {
//            System.out.println("Empate, se regresan las apuestas");
            return 1;
        }
        else if (dealerSuma>21 || jugadorSuma>dealerSuma && jugadorSuma<=21) {
//            System.out.println("\t\tJugador gana");
            return 2;
        }
        else if (dealerSuma<= 21 || jugadorSuma>21) {
//            System.out.println("\t\tLa casa gana");
            return 3;
        }
        return 0;
    }
    
    /**
     * Metodo para obtener el saldo del jugador.
     * @return  El saldo del jugador.
     */
    public int getSaldoJugador() {
        return jugador1.getSaldo();
    }
    
    /**
     * Metodo para obtener al jugador.
     * @return  El jugador.
     */
    public Jugador getJugador() {
        return jugador1;
    }
    
    /**
     * Metodo para obtener al dealer.
     * @return  El dealer.
     */
    public Jugador getDealer() {
        return dealer;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AsCorazones;
    private javax.swing.JLabel AsDiamantes;
    private javax.swing.JLabel AsPicas;
    private javax.swing.JLabel AsTreboles;
    private javax.swing.JLabel CincoCorazones;
    private javax.swing.JLabel CincoDiamantes;
    private javax.swing.JLabel CincoPicas;
    private javax.swing.JLabel CincoTreboles;
    private javax.swing.JLabel CuatroCorazones;
    private javax.swing.JLabel CuatroDiamantes;
    private javax.swing.JLabel CuatroPicas;
    private javax.swing.JLabel CuatroTreboles;
    private javax.swing.JLabel DiezCorazones;
    private javax.swing.JLabel DiezDiamantes;
    private javax.swing.JLabel DiezPicas;
    private javax.swing.JLabel DiezTreboles;
    private javax.swing.JLabel DosCorazones;
    private javax.swing.JLabel DosDiamantes;
    private javax.swing.JLabel DosPicas;
    private javax.swing.JLabel DosTreboles;
    private javax.swing.JLabel JotaCorazones;
    private javax.swing.JLabel JotaDiamantes;
    private javax.swing.JLabel JotaPicas;
    private javax.swing.JLabel JotaTreboles;
    private javax.swing.JLabel Mesa;
    private javax.swing.JLabel NueveCorazones;
    private javax.swing.JLabel NueveDiamantes;
    private javax.swing.JLabel NuevePicas;
    private javax.swing.JLabel NueveTreboles;
    private javax.swing.JLabel OchoCorazones;
    private javax.swing.JLabel OchoDiamantes;
    private javax.swing.JLabel OchoPicas;
    private javax.swing.JLabel OchoTreboles;
    private javax.swing.JLabel ReinaCorazones;
    private javax.swing.JLabel ReinaDiamantes;
    private javax.swing.JLabel ReinaPicas;
    private javax.swing.JLabel ReinaTreboles;
    private javax.swing.JInternalFrame ResultadoFinal;
    private javax.swing.JLabel ReyCorazones;
    private javax.swing.JLabel ReyDiamantes;
    private javax.swing.JLabel ReyPicas;
    private javax.swing.JLabel ReyTreboles;
    private javax.swing.JLabel SeisCorazones;
    private javax.swing.JLabel SeisDiamantes;
    private javax.swing.JLabel SeisPicas;
    private javax.swing.JLabel SeisTreboles;
    private javax.swing.JLabel SieteCorazones;
    private javax.swing.JLabel SieteDiamantes;
    private javax.swing.JLabel SietePicas;
    private javax.swing.JLabel SieteTreboles;
    private javax.swing.JButton TerminaBJ;
    private javax.swing.JLabel TresCorazones;
    private javax.swing.JLabel TresDiamantes;
    private javax.swing.JLabel TresPicas;
    private javax.swing.JLabel TresTreboles;
    private javax.swing.JButton apuestaButton;
    private javax.swing.JInternalFrame cantidadApostada;
    private javax.swing.JTextField cantidadApuesta;
    private javax.swing.JLabel cantidadDisplay;
    private javax.swing.JLabel dealerPrimera;
    private javax.swing.JLabel decorCard1;
    private javax.swing.JLabel decorCard2;
    private javax.swing.JLabel decorCard4;
    private javax.swing.JButton iniciaButton;
    private javax.swing.JButton okResultadoFinal;
    private javax.swing.JButton ok_Apuesta;
    private javax.swing.JButton pideButton;
    private javax.swing.JButton quedaButton;
    private javax.swing.JLabel saldoJugadorActual;
    private javax.swing.JButton temp2;
    private javax.swing.JButton temp3;
    private javax.swing.JLabel textoResultadoFinal;
    private javax.swing.JButton volverJugarButton;
    // End of variables declaration//GEN-END:variables
}
