/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paradise_cartas_v3.poker.PokerGUI;

import ActionListeners.Deteccion;
import java.util.ArrayList;
import paradise_cartas_v3.cartas.Baraja;
import paradise_cartas_v3.cartas.Naipe;
import paradise_cartas_v3.poker.JugadorPoker;
import java.util.Collections;
import paradise_cartas_v3.cartas.Naipe.sortByNum;
import Persona.Cliente.Cliente;
import Casino.Casino;
import JFrames.CuadroStandard;
import static JFrames.CuadroStandard.ANCHO;
import static JFrames.CuadroStandard.COLOR_FONDO;
import static JFrames.CuadroStandard.LARGO;
import static JFrames.CuadroStandard.RUTA_ICONO;
import static JFrames.CuadroStandard.TITULO;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.WindowEvent;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;


/**
 * Clase para crear la interfaz grafica del juego de poker, e iniciar el juego.
 * @author Equipo 2.
 * 
 * @see <a href="https://github.com/yashbhutwala/java-poker-gui-ai/blob/master/src/controller/CardScorer.java">Condiciones de victoria</a>
 */
public class ParadisePoker extends javax.swing.JFrame implements CuadroStandard{
    
    //private Poker pokerJ = new Poker();
    
    private Cliente jugador;
    private Casino casino;
    private Deteccion detector;
    static int fichasJugador;
   
    

    /**
     * Creates new form ParadisePoker
     */
    public ParadisePoker() {
        initComponents();
        establecerIcono(RUTA_ICONO);
        setSize(ANCHO, LARGO);
        setTitle(TITULO);
        getContentPane().setBackground(COLOR_FONDO);
        setLocationRelativeTo(null);
        setLayout(null);
        setVisible(true);
        setPreferredSize(new Dimension(ANCHO, LARGO));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
    }
    public void setJugador(Cliente jugador){
        this.jugador = jugador;
        fichasJugador = jugador.fichas;
        cliente  = new JugadorPoker("Cliente", fichasJugador);
    }
    public void setCasino(Casino casino){
        this.casino = casino;
    }
    public void setDetector(Deteccion detector){
        this.detector = detector;
    }
    @Override
    public void establecerIcono(String ruta){
        Image icon = new ImageIcon(getClass().getResource(ruta)).getImage();
        this.setIconImage(icon);
    }
    
    @Override
    public void desplegar(){
        this.setVisible(true);
    }
    
    @Override
    public void esconder(){
        this.setVisible(false);
    }
    
    @Override
    public void cerrar(){
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
    
    @Override
    public void cambiarPanel(JPanel panel){
        setContentPane(panel);
        repaint();
        revalidate();
        detector.setBoton(false);
        detector.setOpcion(-1);
    }
    
    
    private final static Baraja laBaraja = new Baraja(1, true);
    private final ArrayList<Naipe> disposed = new ArrayList<>();
    private static JugadorPoker cliente;
    private final static JugadorPoker oponente1 = new JugadorPoker("Oponente",10000000);
    private final static JugadorPoker dealer = new JugadorPoker("Dealer");
    private int pozo = 0;
    private final int smallBlindCantidad = 1;
    private final int bigBlindCantidad = 2;
    private int turno = 1;
    int ronda = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        insufSaldoAviso = new javax.swing.JInternalFrame();
        okInsufSaldo = new javax.swing.JButton();
        avisoInsufSaldo = new javax.swing.JLabel();
        resultadoFrame = new javax.swing.JInternalFrame();
        okResultadoFinal = new javax.swing.JButton();
        textoResultadoFinal = new javax.swing.JLabel();
        AsPicas = new javax.swing.JLabel();
        DosPicas = new javax.swing.JLabel();
        TresPicas = new javax.swing.JLabel();
        CuatroPicas = new javax.swing.JLabel();
        CincoPicas = new javax.swing.JLabel();
        SeisPicas = new javax.swing.JLabel();
        SietePicas = new javax.swing.JLabel();
        OchoPicas = new javax.swing.JLabel();
        NuevePicas = new javax.swing.JLabel();
        DiezPicas = new javax.swing.JLabel();
        JotaPicas = new javax.swing.JLabel();
        ReinaPicas = new javax.swing.JLabel();
        ReyPicas = new javax.swing.JLabel();
        AsCorazones = new javax.swing.JLabel();
        DosCorazones = new javax.swing.JLabel();
        TresCorazones = new javax.swing.JLabel();
        CuatroCorazones = new javax.swing.JLabel();
        CincoCorazones = new javax.swing.JLabel();
        SeisCorazones = new javax.swing.JLabel();
        SieteCorazones = new javax.swing.JLabel();
        OchoCorazones = new javax.swing.JLabel();
        NueveCorazones = new javax.swing.JLabel();
        DiezCorazones = new javax.swing.JLabel();
        JotaCorazones = new javax.swing.JLabel();
        ReinaCorazones = new javax.swing.JLabel();
        ReyCorazones = new javax.swing.JLabel();
        AsTreboles = new javax.swing.JLabel();
        DosTreboles = new javax.swing.JLabel();
        TresTreboles = new javax.swing.JLabel();
        CuatroTreboles = new javax.swing.JLabel();
        CincoTreboles = new javax.swing.JLabel();
        SeisTreboles = new javax.swing.JLabel();
        SieteTreboles = new javax.swing.JLabel();
        OchoTreboles = new javax.swing.JLabel();
        NueveTreboles = new javax.swing.JLabel();
        DiezTreboles = new javax.swing.JLabel();
        JotaTreboles = new javax.swing.JLabel();
        ReinaTreboles = new javax.swing.JLabel();
        ReyTreboles = new javax.swing.JLabel();
        AsDiamantes = new javax.swing.JLabel();
        DosDiamantes = new javax.swing.JLabel();
        TresDiamantes = new javax.swing.JLabel();
        CuatroDiamantes = new javax.swing.JLabel();
        CincoDiamantes = new javax.swing.JLabel();
        SeisDiamantes = new javax.swing.JLabel();
        SieteDiamantes = new javax.swing.JLabel();
        OchoDiamantes = new javax.swing.JLabel();
        NueveDiamantes = new javax.swing.JLabel();
        DiezDiamantes = new javax.swing.JLabel();
        JotaDiamantes = new javax.swing.JLabel();
        ReinaDiamantes = new javax.swing.JLabel();
        ReyDiamantes = new javax.swing.JLabel();
        apuestaButton = new javax.swing.JButton();
        checaButton = new javax.swing.JButton();
        tempInicia = new javax.swing.JButton();
        decorCard = new javax.swing.JLabel();
        decorCard1 = new javax.swing.JLabel();
        decorCard2 = new javax.swing.JLabel();
        decorCard3 = new javax.swing.JLabel();
        oponenteLabel = new javax.swing.JLabel();
        recibeApuesta = new javax.swing.JTextField();
        saldoActual = new javax.swing.JLabel();
        resultadoJuego = new javax.swing.JButton();
        textoPozo = new javax.swing.JLabel();
        mesaPoker = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Paradise Poker");
        getContentPane().setLayout(null);

        insufSaldoAviso.setClosable(true);
        insufSaldoAviso.setPreferredSize(new java.awt.Dimension(250, 150));
        insufSaldoAviso.setVisible(false);
        insufSaldoAviso.getContentPane().setLayout(null);

        okInsufSaldo.setText("Ok");
        okInsufSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okInsufSaldoActionPerformed(evt);
            }
        });
        insufSaldoAviso.getContentPane().add(okInsufSaldo);
        okInsufSaldo.setBounds(80, 80, 70, 23);

        avisoInsufSaldo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        insufSaldoAviso.getContentPane().add(avisoInsufSaldo);
        avisoInsufSaldo.setBounds(0, 0, 230, 80);

        getContentPane().add(insufSaldoAviso);
        insufSaldoAviso.setBounds(275, 225, 250, 150);

        resultadoFrame.setVisible(false);
        resultadoFrame.getContentPane().setLayout(null);

        okResultadoFinal.setText("Ok");
        okResultadoFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okResultadoFinalActionPerformed(evt);
            }
        });
        resultadoFrame.getContentPane().add(okResultadoFinal);
        okResultadoFinal.setBounds(110, 100, 80, 23);

        textoResultadoFinal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        textoResultadoFinal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultadoFrame.getContentPane().add(textoResultadoFinal);
        textoResultadoFinal.setBounds(0, 0, 310, 110);

        getContentPane().add(resultadoFrame);
        resultadoFrame.setBounds(240, 210, 330, 200);

        AsPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/As_Picas.png"))); // NOI18N
        getContentPane().add(AsPicas);
        AsPicas.setBounds(720, 20, 60, 90);
        AsPicas.setVisible(false);

        DosPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Dos_Picas.png"))); // NOI18N
        getContentPane().add(DosPicas);
        DosPicas.setBounds(700, 20, 60, 90);
        DosPicas.setVisible(false);

        TresPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Tres_Picas.png"))); // NOI18N
        getContentPane().add(TresPicas);
        TresPicas.setBounds(680, 20, 60, 90);
        TresPicas.setVisible(false);

        CuatroPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cuatro_Picas.png"))); // NOI18N
        getContentPane().add(CuatroPicas);
        CuatroPicas.setBounds(660, 20, 60, 90);
        CuatroPicas.setVisible(false);

        CincoPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cinco_Picas.png"))); // NOI18N
        getContentPane().add(CincoPicas);
        CincoPicas.setBounds(640, 20, 60, 90);
        CincoPicas.setVisible(false);

        SeisPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Seis_Picas.png"))); // NOI18N
        getContentPane().add(SeisPicas);
        SeisPicas.setBounds(620, 20, 60, 90);
        SeisPicas.setVisible(false);

        SietePicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Siete_Picas.png"))); // NOI18N
        getContentPane().add(SietePicas);
        SietePicas.setBounds(600, 20, 60, 90);
        SietePicas.setVisible(false);

        OchoPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Ocho_Picas.png"))); // NOI18N
        getContentPane().add(OchoPicas);
        OchoPicas.setBounds(580, 20, 60, 90);
        OchoPicas.setVisible(false);

        NuevePicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Nueve_Picas.png"))); // NOI18N
        getContentPane().add(NuevePicas);
        NuevePicas.setBounds(560, 20, 60, 90);
        NuevePicas.setVisible(false);

        DiezPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Diez_Picas.png"))); // NOI18N
        getContentPane().add(DiezPicas);
        DiezPicas.setBounds(540, 20, 60, 90);
        DiezPicas.setVisible(false);

        JotaPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Jota_Picas.png"))); // NOI18N
        getContentPane().add(JotaPicas);
        JotaPicas.setBounds(520, 20, 60, 90);
        JotaPicas.setVisible(false);

        ReinaPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Reina_Picas.png"))); // NOI18N
        getContentPane().add(ReinaPicas);
        ReinaPicas.setBounds(500, 20, 60, 90);
        ReinaPicas.setVisible(false);

        ReyPicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Rey_Picas.png"))); // NOI18N
        getContentPane().add(ReyPicas);
        ReyPicas.setBounds(480, 20, 60, 90);
        ReyPicas.setVisible(false);

        AsCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/As_Corazones.png"))); // NOI18N
        getContentPane().add(AsCorazones);
        AsCorazones.setBounds(720, 20, 60, 90);
        AsCorazones.setVisible(false);

        DosCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Dos_Corazones.png"))); // NOI18N
        getContentPane().add(DosCorazones);
        DosCorazones.setBounds(700, 20, 60, 90);
        DosCorazones.setVisible(false);

        TresCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Tres_Corazones.png"))); // NOI18N
        getContentPane().add(TresCorazones);
        TresCorazones.setBounds(680, 20, 60, 90);
        TresCorazones.setVisible(false);

        CuatroCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cuatro_Corazones.png"))); // NOI18N
        getContentPane().add(CuatroCorazones);
        CuatroCorazones.setBounds(660, 20, 60, 90);
        CuatroCorazones.setVisible(false);

        CincoCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cinco_Corazones.png"))); // NOI18N
        getContentPane().add(CincoCorazones);
        CincoCorazones.setBounds(640, 20, 60, 90);
        CincoCorazones.setVisible(false);

        SeisCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Seis_Corazones.png"))); // NOI18N
        getContentPane().add(SeisCorazones);
        SeisCorazones.setBounds(620, 20, 60, 90);
        SeisCorazones.setVisible(false);

        SieteCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Siete_Corazones.png"))); // NOI18N
        getContentPane().add(SieteCorazones);
        SieteCorazones.setBounds(600, 20, 60, 90);
        SieteCorazones.setVisible(false);

        OchoCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Ocho_Corazones.png"))); // NOI18N
        getContentPane().add(OchoCorazones);
        OchoCorazones.setBounds(580, 20, 60, 90);
        OchoCorazones.setVisible(false);

        NueveCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Nueve_Corazones.png"))); // NOI18N
        getContentPane().add(NueveCorazones);
        NueveCorazones.setBounds(560, 20, 60, 90);
        NueveCorazones.setVisible(false);

        DiezCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Diez_Corazones.png"))); // NOI18N
        getContentPane().add(DiezCorazones);
        DiezCorazones.setBounds(540, 20, 60, 90);
        DiezCorazones.setVisible(false);

        JotaCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Jota_Corazones.png"))); // NOI18N
        getContentPane().add(JotaCorazones);
        JotaCorazones.setBounds(520, 20, 60, 90);
        JotaCorazones.setVisible(false);

        ReinaCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Reina_Corazones.png"))); // NOI18N
        getContentPane().add(ReinaCorazones);
        ReinaCorazones.setBounds(500, 20, 60, 90);
        ReinaCorazones.setVisible(false);

        ReyCorazones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Rey_Corazones.png"))); // NOI18N
        getContentPane().add(ReyCorazones);
        ReyCorazones.setBounds(480, 20, 60, 90);
        ReyCorazones.setVisible(false);

        AsTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/As_Treboles.png"))); // NOI18N
        getContentPane().add(AsTreboles);
        AsTreboles.setBounds(720, 20, 60, 90);
        AsTreboles.setVisible(false);

        DosTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Dos_Treboles.png"))); // NOI18N
        getContentPane().add(DosTreboles);
        DosTreboles.setBounds(700, 20, 60, 90);
        DosTreboles.setVisible(false);

        TresTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Tres_Treboles.png"))); // NOI18N
        getContentPane().add(TresTreboles);
        TresTreboles.setBounds(680, 20, 60, 90);
        TresTreboles.setVisible(false);

        CuatroTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cuatro_Treboles.png"))); // NOI18N
        getContentPane().add(CuatroTreboles);
        CuatroTreboles.setBounds(660, 20, 60, 90);
        CuatroTreboles.setVisible(false);

        CincoTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cinco_Treboles.png"))); // NOI18N
        getContentPane().add(CincoTreboles);
        CincoTreboles.setBounds(640, 20, 60, 90);
        CincoTreboles.setVisible(false);

        SeisTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Seis_Treboles.png"))); // NOI18N
        SeisTreboles.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(SeisTreboles);
        SeisTreboles.setBounds(620, 20, 60, 90);
        SeisTreboles.setVisible(false);

        SieteTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Siete_Treboles.png"))); // NOI18N
        getContentPane().add(SieteTreboles);
        SieteTreboles.setBounds(600, 20, 60, 90);
        SieteTreboles.setVisible(false);

        OchoTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Ocho_Treboles.png"))); // NOI18N
        getContentPane().add(OchoTreboles);
        OchoTreboles.setBounds(580, 20, 60, 90);
        OchoTreboles.setVisible(false);

        NueveTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Nueve_Treboles.png"))); // NOI18N
        getContentPane().add(NueveTreboles);
        NueveTreboles.setBounds(560, 20, 60, 90);
        NueveTreboles.setVisible(false);

        DiezTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Diez_Treboles.png"))); // NOI18N
        getContentPane().add(DiezTreboles);
        DiezTreboles.setBounds(540, 20, 60, 90);
        DiezTreboles.setVisible(false);

        JotaTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Jota_Treboles.png"))); // NOI18N
        getContentPane().add(JotaTreboles);
        JotaTreboles.setBounds(520, 20, 60, 90);
        JotaTreboles.setVisible(false);

        ReinaTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Reina_Treboles.png"))); // NOI18N
        getContentPane().add(ReinaTreboles);
        ReinaTreboles.setBounds(500, 20, 60, 90);
        ReinaTreboles.setVisible(false);

        ReyTreboles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Rey_Treboles.png"))); // NOI18N
        getContentPane().add(ReyTreboles);
        ReyTreboles.setBounds(480, 20, 60, 90);
        ReyTreboles.setVisible(false);

        AsDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/As_Diamantes.png"))); // NOI18N
        getContentPane().add(AsDiamantes);
        AsDiamantes.setBounds(720, 20, 60, 90);
        AsDiamantes.setVisible(false);

        DosDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Dos_Diamantes.png"))); // NOI18N
        getContentPane().add(DosDiamantes);
        DosDiamantes.setBounds(700, 20, 60, 90);
        DosDiamantes.setVisible(false);

        TresDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Tres_Diamantes.png"))); // NOI18N
        getContentPane().add(TresDiamantes);
        TresDiamantes.setBounds(680, 20, 60, 90);
        TresDiamantes.setVisible(false);

        CuatroDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cuatro_Diamantes.png"))); // NOI18N
        getContentPane().add(CuatroDiamantes);
        CuatroDiamantes.setBounds(660, 20, 60, 90);
        CuatroDiamantes.setVisible(false);

        CincoDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Cinco_Diamantes.png"))); // NOI18N
        getContentPane().add(CincoDiamantes);
        CincoDiamantes.setBounds(640, 20, 60, 90);
        CincoDiamantes.setVisible(false);

        SeisDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Seis_Diamantes.png"))); // NOI18N
        getContentPane().add(SeisDiamantes);
        SeisDiamantes.setBounds(620, 20, 60, 90);
        SeisDiamantes.setVisible(false);

        SieteDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Siete_Diamantes.png"))); // NOI18N
        getContentPane().add(SieteDiamantes);
        SieteDiamantes.setBounds(600, 20, 60, 90);
        SieteDiamantes.setVisible(false);

        OchoDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Ocho_Diamantes.png"))); // NOI18N
        getContentPane().add(OchoDiamantes);
        OchoDiamantes.setBounds(580, 20, 60, 90);
        OchoDiamantes.setVisible(false);

        NueveDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Nueve_Diamantes.png"))); // NOI18N
        getContentPane().add(NueveDiamantes);
        NueveDiamantes.setBounds(560, 20, 60, 90);
        NueveDiamantes.setVisible(false);

        DiezDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Diez_Diamantes.png"))); // NOI18N
        getContentPane().add(DiezDiamantes);
        DiezDiamantes.setBounds(540, 20, 60, 90);
        DiezDiamantes.setVisible(false);

        JotaDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Jota_Diamantes.png"))); // NOI18N
        getContentPane().add(JotaDiamantes);
        JotaDiamantes.setBounds(520, 20, 60, 90);
        JotaDiamantes.setVisible(false);

        ReinaDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Reina_Diamantes.png"))); // NOI18N
        getContentPane().add(ReinaDiamantes);
        ReinaDiamantes.setBounds(500, 20, 60, 90);
        ReinaDiamantes.setVisible(false);

        ReyDiamantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/Rey_Diamantes.png"))); // NOI18N
        getContentPane().add(ReyDiamantes);
        ReyDiamantes.setBounds(480, 20, 60, 90);
        ReyDiamantes.setVisible(false);

        apuestaButton.setText("Apuesta");
        apuestaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apuestaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(apuestaButton);
        apuestaButton.setBounds(110, 480, 100, 23);
        apuestaButton.setVisible(false);

        checaButton.setText("Checa");
        checaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(checaButton);
        checaButton.setBounds(340, 480, 100, 23);
        checaButton.setVisible(false);

        tempInicia.setText("Inicia");
        tempInicia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempIniciaActionPerformed(evt);
            }
        });
        getContentPane().add(tempInicia);
        tempInicia.setBounds(350, 300, 90, 23);

        decorCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/back_card_blue.png"))); // NOI18N
        getContentPane().add(decorCard);
        decorCard.setBounds(210, 70, 60, 90);

        decorCard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/back_card_blue.png"))); // NOI18N
        getContentPane().add(decorCard1);
        decorCard1.setBounds(660, 380, 60, 90);
        decorCard1.setVisible(false);

        decorCard2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/back_card_blue.png"))); // NOI18N
        getContentPane().add(decorCard2);
        decorCard2.setBounds(590, 380, 60, 90);
        decorCard2.setVisible(false);

        decorCard3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/blackjack/BJGUI/back_card_blue.png"))); // NOI18N
        getContentPane().add(decorCard3);
        decorCard3.setBounds(200, 80, 60, 90);

        oponenteLabel.setBackground(new java.awt.Color(0, 0, 0));
        oponenteLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        oponenteLabel.setForeground(new java.awt.Color(255, 255, 255));
        oponenteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        oponenteLabel.setText("Oponente");
        getContentPane().add(oponenteLabel);
        oponenteLabel.setBounds(630, 330, 90, 40);
        oponenteLabel.setVisible(false);
        getContentPane().add(recibeApuesta);
        recibeApuesta.setBounds(220, 480, 100, 30);
        recibeApuesta.setVisible(false);

        saldoActual.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        saldoActual.setForeground(new java.awt.Color(255, 255, 255));
        saldoActual.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(saldoActual);
        saldoActual.setBounds(80, 230, 150, 50);

        resultadoJuego.setText("Resultado");
        resultadoJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultadoJuegoActionPerformed(evt);
            }
        });
        getContentPane().add(resultadoJuego);
        resultadoJuego.setBounds(470, 480, 120, 23);
        resultadoJuego.setVisible(false);

        textoPozo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        textoPozo.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(textoPozo);
        textoPozo.setBounds(490, 140, 160, 40);
        textoPozo.setVisible(false);

        mesaPoker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paradise_cartas_v3/poker/PokerGUI/mesa1.png"))); // NOI18N
        mesaPoker.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(mesaPoker);
        mesaPoker.setBounds(0, 0, 800, 599);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void apuestaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apuestaButtonActionPerformed
        // TODO add your handling code here:
        if (ronda <= 4) {
            try {
                int cantidadApostar  = Integer.parseInt(recibeApuesta.getText().trim());
                int saldoClienteActual = cliente.getSaldo();
                if (saldoClienteActual >= cantidadApostar && cantidadApostar <= saldoClienteActual*(jugador.apuestaMax * 100)) {
                    apuesta(cantidadApostar);

                    saldoActual.setText("Saldo: "+String.valueOf(cliente.getSaldo()));
                    
                    muestraManoCliente();
                    decorCard1.setVisible(true);
                    decorCard2.setVisible(true);
                    pozo += cantidadApostar;
                    textoPozo.setText("Pozo: "+String.valueOf(pozo));
                    textoPozo.setVisible(true);
                } else {
                    insufSaldoAviso.setVisible(true);
                    avisoInsufSaldo.setText("Saldo insuficiente");
                }

            } catch (NumberFormatException nfe) { }
        } else {
            resultadoJuego.setVisible(true);
        }
    }//GEN-LAST:event_apuestaButtonActionPerformed

    private void checaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checaButtonActionPerformed
        // TODO add your handling code here:
        checa();
        muestraManoCliente();
        decorCard1.setVisible(true);
        decorCard2.setVisible(true);
        switch (ronda) {
            case 1:
                primeraRonda();
                break;
            case 2:
                segundaRonda();
                break;
            case 3:
                terceraRonda();
                break;
        }
        if (ronda <= 3) {
            ronda++;
            muestraCartasJuego();
            textoPozo.setText("Pozo: "+String.valueOf(pozo));
            textoPozo.setVisible(true);
        } else {
            resultadoJuego.setVisible(true);
        }
        
        
    }//GEN-LAST:event_checaButtonActionPerformed

    private void tempIniciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempIniciaActionPerformed
        // TODO add your handling code here:
        iniciaPoker();
        muestraManoCliente();
        decorCard1.setVisible(true);
        decorCard2.setVisible(true);
        saldoActual.setText("Saldo: "+String.valueOf(cliente.getSaldo()));
        saldoActual.setVisible(true);
        tempInicia.setVisible(false);
        apuestaButton.setVisible(true);
        checaButton.setVisible(true);
        recibeApuesta.setVisible(true);
        oponenteLabel.setVisible(true);
        textoPozo.setText("Pozo: "+String.valueOf(pozo));
        textoPozo.setVisible(true);
        ronda++;
    }//GEN-LAST:event_tempIniciaActionPerformed

    private void okInsufSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okInsufSaldoActionPerformed
        // TODO add your handling code here:
        insufSaldoAviso.setVisible(false);
    }//GEN-LAST:event_okInsufSaldoActionPerformed

    private void resultadoJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultadoJuegoActionPerformed
        // TODO add your handling code here:
        ArrayList<Naipe> manoJugador = cliente.getMano();
        ArrayList<Naipe> manoJugadorTemp = (ArrayList<Naipe>)manoJugador.clone();
        Collections.copy(manoJugadorTemp, manoJugador);
        ArrayList<Naipe> manoOponente = oponente1.getMano();
        ArrayList<Naipe> manoOponenteTemp = (ArrayList<Naipe>)manoOponente.clone();
        Collections.copy(manoOponenteTemp, manoOponente);
        boolean resultadoMostrar = resultadoFinal(manoJugadorTemp, dealer.getMano(), manoOponenteTemp);
        muestraManoOponente();
//        cliente.mostrarMano(true);
//        oponente1.mostrarMano(true);
//        dealer.mostrarMano(true);
        decorCard1.setVisible(false);
        decorCard2.setVisible(false);
        if (resultadoMostrar) {
            textoResultadoFinal.setText("Jugador Gana");
            jugador.fichas += jugador.bono*pozo;
            casino.sumaPoker((int)(-1*jugador.bono*pozo));
        } else {
            jugador.fichas -= pozo;
            casino.sumaPoker((int)(pozo));
            textoResultadoFinal.setText("Jugador Pierde");
        }
        resultadoFrame.setVisible(true);
        //jugador.fichas += ganado perdido:
    //jugador.bono;
    //jugador.apuestaMax*100;
    //casino.sumaBlackjack(monto ganado);
    }//GEN-LAST:event_resultadoJuegoActionPerformed

    private void okResultadoFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okResultadoFinalActionPerformed
        // TODO add your handling code here:
        resultadoFrame.setVisible(false);
        detector.setBoton();
    }//GEN-LAST:event_okResultadoFinalActionPerformed

    /**
     * Arranca todo
     */
    public void inicia() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParadisePoker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParadisePoker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParadisePoker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParadisePoker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParadisePoker().setVisible(true);
            }
        });
    }
    
    /**
     * Metodo para mostrar la mano del jugador en la interfaz grafica.
     */
    public void muestraManoCliente() {
        ArrayList<Naipe> manoCliente = cliente.getMano();
        int x=160;
        int y=370;
        
        for(int i=0; i<2; i++) {
            checaNaipe(manoCliente.get(i), x, y);
            x += 70;
        }
    }
    
    /**
     * Metodo para mostrar la mano del oponente en la interfaz grafica.
     */
    public void muestraManoOponente() {
        ArrayList<Naipe> manoOponente = oponente1.getMano();
        int x=590;
        int y=370;
        
        for (int i=0; i<2; i++) {
            checaNaipe(manoOponente.get(i), x, y);
            x += 70;
        }
    }
    
    /**
     * Metodo para mostrar las cartas del juego.
     */
    public void muestraCartasJuego() {
        ArrayList<Naipe> manoDealer = dealer.getMano();
        int x=250;
        int y=210;
        int manoSize = manoDealer.size();
        
        for (int i=0; i<manoSize; i++) {
            checaNaipe(manoDealer.get(i), x, y);
            x += 70;
        }
    }
    
    
    /**
     * Metodo para iniciar el juego de poker, revias las apuestas ciegas y entrega las cartas a los jugadores.
     */
    public void iniciaPoker() {
        checaBlinds();
        cliente.agregarNaipe(laBaraja.sacarNaipe());
        cliente.agregarNaipe(laBaraja.sacarNaipe());
        oponente1.agregarNaipe(laBaraja.sacarNaipe());
        oponente1.agregarNaipe(laBaraja.sacarNaipe());
//        System.out.println("Inicia");
//        cliente.mostrarMano(true);
//        oponente1.mostrarMano(true);
    }
    
    /**
     * Metodo para iniciar la primera ronda, revisar las apuestas ciegas y sacar las cartas del dealer.
     */
    public void primeraRonda() {
        checaBlinds();
        disposed.add(laBaraja.sacarNaipe());
        dealer.agregarNaipe(laBaraja.sacarNaipe());
        dealer.agregarNaipe(laBaraja.sacarNaipe());
        dealer.agregarNaipe(laBaraja.sacarNaipe());
    }
    
    /**
     * Metodo para sacar la cuarta carta del dealer.
     */
    public void segundaRonda() {
        disposed.add(laBaraja.sacarNaipe());
        dealer.agregarNaipe(laBaraja.sacarNaipe());
    }
    
    /**
     * Metodo para sacar la ultima carta del dealer.
     */
    public void terceraRonda() {
        disposed.add(laBaraja.sacarNaipe());
        dealer.agregarNaipe(laBaraja.sacarNaipe());
    }
    
    /**
     * Metodo para simular la ronda de apuestas.
     */
    public void rondaApuestas() {
        // Oponente1 siempre checará, igualando si el cliente aumenta
        
    }
    
    /**
     * Metodo para revisar cual apuesta ciega le toca a quien.
     */
    public void checaBlinds() {
        if(turno%2 == 0) {
            smallBlind();
            //System.out.println("oponente big");
        } else {
            bigBlind();
            //System.out.println("oponente small");
        }
        turno++;
    }
    
    /**
     * Metodo para simular la apuesta ciega chica del jugador.
     */
    public void smallBlind() {
        pozo += smallBlindCantidad;
        cliente.apuestaBase(smallBlindCantidad);
    }
    
    /**
     * Metodo para simular la apuesta ciega grande del jugador.
     */
    public void bigBlind() {
        pozo += bigBlindCantidad;
        cliente.apuestaBase(bigBlindCantidad);
    }
    
    /**
     * Metodo para realizar la apuesta del jugador.
     * @param cantidadApostar La cantidad de dinero que desea apostar.
     */
    public void apuesta(int cantidadApostar) {
        //jugador.fichas -= cantidadApostar;
        cliente.actualizaSaldo(cliente.getSaldo()-cantidadApostar);
        pozo += cantidadApostar;
    }
   
    /**
     * Metodo para simular la accion de "checar" del jugador.
     */
    public void checa() {
        cliente.actualizaCheck(true);
        oponente1.actualizaCheck(true);
    }
    
    /**
     * Metodo para determinar quien gana.
     * @param manoJugador   La mano del jugador.
     * @param manoDealer    La mano del dealer.
     * @param manoOponente  La mano del oponente.
     * @return              True si el jugador gana.
     */
    public boolean resultadoFinal(ArrayList<Naipe> manoJugador, ArrayList<Naipe> manoDealer, ArrayList<Naipe> manoOponente) {
        /*
        Carta Alta
        Par
        Dos pares
        Tercia
        Escalera
        Color
        Full House
        Poker
        Escalera de color
        Escalera Real
        */
        manoJugador.addAll(manoDealer);
        manoOponente.addAll(manoDealer);
        
        int puntosJugador = puntuacionMano(manoJugador);
        int puntosOponente = puntuacionMano(manoOponente);
        
        return puntosJugador > puntosOponente;
    }
    
    /**
     * Metodo para obtener la puntuacion de la mano a revisar. Puntuacion mas alta gana.
     * @param manoARevisar  La mano a revisar.
     * @return              La puntuacion de la mano.
     */
    public int puntuacionMano(ArrayList<Naipe> manoARevisar) {
        Collections.sort(manoARevisar,new sortByNum());
        
        int hasRoyalFlush = checkRoyalFlush(manoARevisar); //check to see if has royal flush
        int hasStraightFlush = checkStraightFlush(manoARevisar); //ect...
        int hasFourOfAKind = checkFourOfAKind(manoARevisar);
        int hasFullHouse = checkFullHouse(manoARevisar);
        int hasFlush = checkFlush(manoARevisar);
        int hasStraight = checkStraight(manoARevisar);
        int hasThreeOfAKind = checkThreeOfAKind(manoARevisar);
        int hasTwoPair = checkTwoPair(manoARevisar);
        int hasOnePair = checkOnePair(manoARevisar);
        
        if (hasRoyalFlush != 0) {  //if the player has a royal flush...
            return hasRoyalFlush; //return that return value
        }
        //this continues for all hands, in order of how good the hand is
        if (hasStraightFlush != 0) {
            return hasStraightFlush;
        }
        if (hasFourOfAKind != 0) {
            return hasFourOfAKind;
        }
        if (hasFullHouse != 0) {
            return hasFullHouse;
        }
        if (hasFlush != 0) {
            return hasFlush;
        }
        if (hasStraight != 0) {
            return hasStraight;
        }
        if (hasThreeOfAKind != 0) {
            return hasThreeOfAKind;
        }
        if (hasTwoPair != 0) {
            return hasTwoPair;
        }
        if (hasOnePair != 0) {
            return hasOnePair;
        }
        
        return manoARevisar.get(0).getNumero();
    }
    
    /**
     * Metood para revisar si es escalera real.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkRoyalFlush(ArrayList<Naipe> cardList) {
        
        //if the highest 5 return a royal straight and are all the same suit
        if (cardList.get(0).getNumero() == 14 && cardList.get(1).getNumero() == 13 && cardList.get(2).getNumero() == 12 && cardList.get(3).getNumero() == 11 && cardList.get(4).getNumero() == 10
            && cardList.get(0).getPalo().equals(cardList.get(1).getPalo()) && cardList.get(1).getPalo().equals(cardList.get(2).getPalo()) && cardList.get(2).getPalo().equals(cardList.get(3).getPalo()) && cardList.get(3).getPalo().equals(cardList.get(4).getPalo())) {
            return 180 + cardList.get(0).getNumero();
        }
        //if the middle 5 return a royal straight and are all the same suit
        if (cardList.get(1).getNumero() == 14 && cardList.get(2).getNumero() == 13 && cardList.get(3).getNumero() == 12 && cardList.get(4).getNumero() == 11 && cardList.get(5).getNumero() == 10
            && cardList.get(1).getPalo().equals(cardList.get(2).getPalo()) && cardList.get(2).getPalo().equals(cardList.get(3).getPalo()) && cardList.get(3).getPalo().equals(cardList.get(4).getPalo()) && cardList.get(4).getPalo().equals(cardList.get(5).getPalo())) {
            return 180 + cardList.get(1).getNumero();
        }
        //if the lowest 5 return a royal straight and are all the same suit
        if (cardList.get(2).getNumero() == 14 && cardList.get(3).getNumero() == 13 && cardList.get(4).getNumero() == 12 && cardList.get(5).getNumero() == 11 && cardList.get(6).getNumero() == 10
            && cardList.get(2).getPalo().equals(cardList.get(3).getPalo()) && cardList.get(3).getPalo().equals(cardList.get(4).getPalo()) && cardList.get(4).getPalo().equals(cardList.get(5).getPalo()) && cardList.get(5).getPalo().equals(cardList.get(6).getPalo())) {
            return 180 + cardList.get(2).getNumero();
        }
        return 0;
    }
    
    /**
     * Metodo para revisar si es escalera de color.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkStraightFlush(ArrayList<Naipe> cardList) {
        //if the highest 5 return a straight and are all the same suit
        if (cardList.get(0).getNumero() == cardList.get(1).getNumero() + 1 && cardList.get(1).getNumero() == cardList.get(2).getNumero() + 1 && cardList.get(2).getNumero() == cardList.get(3).getNumero() + 1 && cardList.get(3).getNumero() == cardList.get(4).getNumero() + 1
            && cardList.get(0).getPalo().equals(cardList.get(1).getPalo()) && cardList.get(1).getPalo().equals(cardList.get(2).getPalo()) && cardList.get(2).getPalo().equals(cardList.get(3).getPalo()) && cardList.get(3).getPalo().equals(cardList.get(4).getPalo())) {
            return 160 + cardList.get(0).getNumero();
        }
        //if the middle 5 return a straight and are all the same suit
        if (cardList.get(1).getNumero() == cardList.get(2).getNumero() + 1 && cardList.get(2).getNumero() == cardList.get(3).getNumero() + 1 && cardList.get(3).getNumero() == cardList.get(4).getNumero() + 1 && cardList.get(4).getNumero() == cardList.get(5).getNumero() + 1
            && cardList.get(1).getPalo().equals(cardList.get(2).getPalo()) && cardList.get(2).getPalo().equals(cardList.get(3).getPalo()) && cardList.get(3).getPalo().equals(cardList.get(4).getPalo()) && cardList.get(4).getPalo().equals(cardList.get(5).getPalo())) {
            return 160 + cardList.get(1).getNumero();
        }
        //if the lowest 5 return a straight and are all the same suit
        if (cardList.get(2).getNumero() == cardList.get(3).getNumero() + 1 && cardList.get(3).getNumero() == cardList.get(4).getNumero() + 1 && cardList.get(4).getNumero() == cardList.get(5).getNumero() + 1 && cardList.get(5).getNumero() == cardList.get(6).getNumero() + 1
            && cardList.get(2).getPalo().equals(cardList.get(3).getPalo()) && cardList.get(3).getPalo().equals(cardList.get(4).getPalo()) && cardList.get(4).getPalo().equals(cardList.get(5).getPalo()) && cardList.get(5).getPalo().equals(cardList.get(6).getPalo())) {
            return 160 + cardList.get(2).getNumero();
        }
        return 0;
    }
    
    /**
     * Metodo para revisar si es poker.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkFourOfAKind(ArrayList<Naipe> cardList) {
        //if the higest four are the same value
        if (cardList.get(0).getNumero() == cardList.get(1).getNumero() && cardList.get(1).getNumero() == cardList.get(2).getNumero() && cardList.get(2).getNumero() == cardList.get(3).getNumero()) {
            return 140 + cardList.get(0).getNumero();
        }
        //if next four are same value... ect...
        if (cardList.get(1).getNumero() == cardList.get(2).getNumero() && cardList.get(2).getNumero() == cardList.get(3).getNumero() && cardList.get(3).getNumero() == cardList.get(4).getNumero()) {
            return 140 + cardList.get(1).getNumero();
        }
        if (cardList.get(2).getNumero() == cardList.get(3).getNumero() && cardList.get(3).getNumero() == cardList.get(4).getNumero() && cardList.get(4).getNumero() == cardList.get(5).getNumero()) {
            return 140 + cardList.get(2).getNumero();
        }
        if (cardList.get(3).getNumero() == cardList.get(4).getNumero() && cardList.get(4).getNumero() == cardList.get(5).getNumero() && cardList.get(5).getNumero() == cardList.get(6).getNumero()) {
            return 140 + cardList.get(3).getNumero();
        }
        return 0;
    }
    
    /**
     * Metodo para revisar si es full house.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkFullHouse(ArrayList<Naipe> cardList) {

        int third = checkThreeOfAKind(cardList); //return the value from a three of a kind check
        if (third == 0) { //if there is no three of a kind, there is no full house
            return 0; //so end
        } else { //if there is three of a kind, check for two of a kind of different value from the three of a kind
            third = third - 60; //change this vale to be the value of the card used in the three of a kind
            if (cardList.get(0).getNumero() == cardList.get(1).getNumero() && cardList.get(0).getNumero() != third) {
                return 120 + third; //if we have a pair that is not the three of a kind, return the full house constant plus the value of the three of a kind card
            }
            if (cardList.get(1).getNumero() == cardList.get(2).getNumero() && cardList.get(1).getNumero() != third) {
                return 120 + third;
            }
            if (cardList.get(2).getNumero() == cardList.get(3).getNumero() && cardList.get(2).getNumero() != third) {
                return 120 + third;
            }
            if (cardList.get(3).getNumero() == cardList.get(4).getNumero() && cardList.get(3).getNumero() != third) {
                return 120 + third;
            }
            if (cardList.get(4).getNumero() == cardList.get(5).getNumero() && cardList.get(4).getNumero() != third) {
                return 120 + third;
            }
            if (cardList.get(5).getNumero() == cardList.get(6).getNumero() && cardList.get(5).getNumero() != third) {
                return 120 + third;
            }
        }

        return 0;
    }
    
    /**
     * Metodo para revisar si es color.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkFlush(ArrayList<Naipe> cardList) {

        int numHeart = 0;
        int numSpade = 0;
        int numDiamond = 0;
        int numClub = 0;
        //varaibles for holding num of each suit
        //add values to the varaibles
        for (int i = 0; i < cardList.size(); i++) {
            if (cardList.get(i).getPalo().equals("Spades")) {
                numSpade++;
            }
            if (cardList.get(i).getPalo().equals("Hearts")) {
                numHeart++;
            }
            if (cardList.get(i).getPalo().equals("Clubs")) {
                numClub++;
            }
            if (cardList.get(i).getPalo().equals("Diamonds")) {
                numDiamond++;
            }
        }

        if (numDiamond > 4) { //if the flush is caused by diamonds
            if (cardList.get(0).getPalo().equals("Diamonds")) { //if the first card is highest in the flush
                return 100 + cardList.get(0).getNumero();
            }
            if (cardList.get(1).getPalo().equals("Diamonds")) { //if second card is highest in the flush
                return 100 + cardList.get(1).getNumero();
            }
            if (cardList.get(2).getPalo().equals("Diamonds")) { //if the third card is highest in the flush
                return 100 + cardList.get(2).getNumero();
            }
        }
        if (numClub > 4) { //if the flush is caused by clubs
            if (cardList.get(0).getPalo().equals("Clubs")) { //if the first card is highest in the flush
                return 100 + cardList.get(0).getNumero();
            }
            if (cardList.get(1).getPalo().equals("Clubs")) { //if the second card is highest in the flush
                return 100 + cardList.get(1).getNumero();
            }
            if (cardList.get(2).getPalo().equals("Clubs")) { //if the third card is highest in the flush
                return 100 + cardList.get(2).getNumero();
            }
        }
        if (numHeart > 4) { //if the flush is caused by hearts
            if (cardList.get(0).getPalo().equals("Hearts")) { //if the first card is highest in the flush
                return 100 + cardList.get(0).getNumero();
            }
            if (cardList.get(1).getPalo().equals("Hearts")) { //if the second card is highest in the flush
                return 100 + cardList.get(1).getNumero();
            }
            if (cardList.get(2).getPalo().equals("Hearts")) { //if the third card is highest in the flush
                return 100 + cardList.get(2).getNumero();
            }
        }
        if (numSpade > 4) { //if the flush is caused by spades
            if (cardList.get(0).getPalo().equals("Spades")) { //if the first card is highest in the flush
                return 100 + cardList.get(0).getNumero();
            }
            if (cardList.get(1).getPalo().equals("Spades")) { //if the second card is highest in the flush
                return 100 + cardList.get(1).getNumero();
            }
            if (cardList.get(2).getPalo().equals("Spades")) { //if the third card is highest in the flush
                return 100 + cardList.get(2).getNumero();
            }
        }

        return 0;
    }
    
    /**
     * Metodo para revisar si es escalera.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkStraight(ArrayList<Naipe> cardList) {
        //if the highest 5 return a straight
        if ((cardList.get(0).getNumero() == (cardList.get(1).getNumero() + 1)) && (cardList.get(1).getNumero() == (cardList.get(2).getNumero() + 1)) && (cardList.get(2).getNumero() == (cardList.get(3).getNumero() + 1)) && (cardList.get(3).getNumero() == (cardList.get(4).getNumero() + 1))) {
            return 80 + cardList.get(0).getNumero();
        }
        //if the middle 5 return a straight
        if ((cardList.get(1).getNumero() == (cardList.get(2).getNumero() + 1)) && (cardList.get(2).getNumero() == (cardList.get(3).getNumero() + 1)) && (cardList.get(3).getNumero() == (cardList.get(4).getNumero() + 1)) && (cardList.get(4).getNumero() == (cardList.get(5).getNumero() + 1))) {
            return 80 + cardList.get(1).getNumero();
        }
        //if the lowest 5 return a straight
        if ((cardList.get(2).getNumero() == (cardList.get(3).getNumero() + 1)) && (cardList.get(3).getNumero() == (cardList.get(4).getNumero() + 1)) && (cardList.get(4).getNumero() == (cardList.get(5).getNumero() + 1)) && (cardList.get(5).getNumero() == (cardList.get(6).getNumero() + 1))) {
            return 80 + cardList.get(2).getNumero();
        }
        return 0;
    }
    
    /**
     * Metodo para revisar si es tercia.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkThreeOfAKind(ArrayList<Naipe> cardList) {
        //if the first three are the same value...
        if (cardList.get(0).getNumero() == cardList.get(1).getNumero() && cardList.get(1).getNumero() == cardList.get(2).getNumero()) {
            return 60 + cardList.get(0).getNumero();
        }
        //ect...
        if (cardList.get(1).getNumero() == cardList.get(2).getNumero() && cardList.get(2).getNumero() == cardList.get(3).getNumero()) {
            return 60 + cardList.get(1).getNumero();
        }
        if (cardList.get(2).getNumero() == cardList.get(3).getNumero() && cardList.get(4).getNumero() == cardList.get(4).getNumero()) {
            return 60 + cardList.get(2).getNumero();
        }
        if (cardList.get(3).getNumero() == cardList.get(4).getNumero() && cardList.get(4).getNumero() == cardList.get(5).getNumero()) {
            return 60 + cardList.get(3).getNumero();
        }
        if (cardList.get(4).getNumero() == cardList.get(5).getNumero() && cardList.get(5).getNumero() == cardList.get(6).getNumero()) {
            return 60 + cardList.get(4).getNumero();
        }
        return 0;

    }
      
    /**
     * Metodo para revisar si tiene dos pares.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkTwoPair(ArrayList<Naipe> cardList) {
        int second = checkOnePair(cardList); //check to see if there is a single pair
        if (second == 0) { //if no pair exists
            return 0; //return 0
        } else { //if there is a pair
            second = second - 20; //second is now the value of the pair
            if (cardList.get(0).getNumero() == cardList.get(1).getNumero() && cardList.get(0).getNumero() != second) {
                return 40 + second; //if we have a pair that is not the first pair, return the two pair constant plus the value of the highest pair card
            }
            if (cardList.get(1).getNumero() == cardList.get(2).getNumero() && cardList.get(1).getNumero() != second) {
                return 40 + second;
            }
            if (cardList.get(2).getNumero() == cardList.get(3).getNumero() && cardList.get(2).getNumero() != second) {
                return 40 + second;
            }
            if (cardList.get(3).getNumero() == cardList.get(4).getNumero() && cardList.get(3).getNumero() != second) {
                return 40 + second;
            }
            if (cardList.get(4).getNumero() == cardList.get(5).getNumero() && cardList.get(4).getNumero() != second) {
                return 40 + second;
            }
            if (cardList.get(5).getNumero() == cardList.get(6).getNumero() && cardList.get(5).getNumero() != second) {
                return 40 + second;
            }
        }
        return 0;
    }
    
    /**
     * Metodo para revisar si tiene un par.
     * @param cardList  La mano a revisar.
     * @return          La puntuacion correspondiente.
     */
    private static int checkOnePair(ArrayList<Naipe> cardList) {
        //checks to see if the first two cards are a pair...
        if (cardList.get(0).getNumero() == cardList.get(1).getNumero()) {
            return 20 + cardList.get(0).getNumero();
        }
        //ect...
        if (cardList.get(1).getNumero() == cardList.get(2).getNumero()) {
            return 20 + cardList.get(1).getNumero();
        }
        if (cardList.get(2).getNumero() == cardList.get(3).getNumero()) {
            return 20 + cardList.get(2).getNumero();
        }
        if (cardList.get(3).getNumero() == cardList.get(4).getNumero()) {
            return 20 + cardList.get(3).getNumero();
        }
        if (cardList.get(4).getNumero() == cardList.get(5).getNumero()) {
            return 20 + cardList.get(4).getNumero();
        }
        if (cardList.get(5).getNumero() == cardList.get(6).getNumero()) {
            return 20 + cardList.get(6).getNumero();
        }
        return 0;

    }
        
    /**
     * Metodo para mostrar el naipe en la ubicacion deseada.
     * @param n El naipe a mostrar.
     * @param x La coordenada en X.
     * @param y La coordenada en Y.
     */
    public void checaNaipe(Naipe n, int x, int y) {
        if (n.getPalo().equals("Treboles")) {
            switch (n.getNumero()) {
                case 1:
                    AsTreboles.setVisible(true);
                    AsTreboles.setBounds(x, y, 60, 90);
                    break;
                case 2:
                    DosTreboles.setVisible(true);
                    DosTreboles.setBounds(x, y, 60, 90);
                    break;
                case 3:
                    TresTreboles.setVisible(true);
                    TresTreboles.setBounds(x, y, 60, 90);
                    break;
                case 4:
                    CuatroTreboles.setVisible(true);
                    CuatroTreboles.setBounds(x, y, 60, 90);
                    break;
                case 5:
                    CincoTreboles.setVisible(true);
                    CincoTreboles.setBounds(x, y, 60, 90);
                    break;
                case 6:
                    SeisTreboles.setVisible(true);
                    SeisTreboles.setBounds(x, y, 60, 90);
                    break;
                case 7:
                    SieteTreboles.setVisible(true);
                    SieteTreboles.setBounds(x, y, 60, 90);
                    break;
                case 8:
                    OchoTreboles.setVisible(true);
                    OchoTreboles.setBounds(x, y, 60, 90);
                    break;
                case 9:
                    NueveTreboles.setVisible(true);
                    NueveTreboles.setBounds(x, y, 60, 90);
                    break;
                case 10:
                    DiezTreboles.setVisible(true);
                    DiezTreboles.setBounds(x, y, 60, 90);
                    break;
                case 11:
                    JotaTreboles.setVisible(true);
                    JotaTreboles.setBounds(x, y, 60, 90);
                    break;
                case 12:
                    ReinaTreboles.setVisible(true);
                    ReinaTreboles.setBounds(x, y, 60, 90);
                    break;
                case 13:
                    ReyTreboles.setVisible(true);
                    ReyTreboles.setBounds(x, y, 60, 90);
                    break;
            }
        } else if (n.getPalo().equals("Diamantes")) {
            switch (n.getNumero()) {
                case 1:
                    AsDiamantes.setVisible(true);
                    AsDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 2:
                    DosDiamantes.setVisible(true);
                    DosDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 3:
                    TresDiamantes.setVisible(true);
                    TresDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 4:
                    CuatroDiamantes.setVisible(true);
                    CuatroDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 5:
                    CincoDiamantes.setVisible(true);
                    CincoDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 6:
                    SeisDiamantes.setVisible(true);
                    SeisDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 7:
                    SieteDiamantes.setVisible(true);
                    SieteDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 8:
                    OchoDiamantes.setVisible(true);
                    OchoDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 9:
                    NueveDiamantes.setVisible(true);
                    NueveDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 10:
                    DiezDiamantes.setVisible(true);
                    DiezDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 11:
                    JotaDiamantes.setVisible(true);
                    JotaDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 12:
                    ReinaDiamantes.setVisible(true);
                    ReinaDiamantes.setBounds(x, y, 60, 90);
                    break;
                case 13:
                    ReyDiamantes.setVisible(true);
                    ReyDiamantes.setBounds(x, y, 60, 90);
                    break;
            }
        } else if(n.getPalo().equals("Picas")) {
            switch (n.getNumero()) {
                case 1:
                    AsPicas.setVisible(true);
                    AsPicas.setBounds(x, y, 60, 90);
                    break;
                case 2:
                    DosPicas.setVisible(true);
                    DosPicas.setBounds(x, y, 60, 90);
                    break;
                case 3:
                    TresPicas.setVisible(true);
                    TresPicas.setBounds(x, y, 60, 90);
                    break;
                case 4:
                    CuatroPicas.setVisible(true);
                    CuatroPicas.setBounds(x, y, 60, 90);
                    break;
                case 5:
                    CincoPicas.setVisible(true);
                    CincoPicas.setBounds(x, y, 60, 90);
                    break;
                case 6:
                    SeisPicas.setVisible(true);
                    SeisPicas.setBounds(x, y, 60, 90);
                    break;
                case 7:
                    SietePicas.setVisible(true);
                    SietePicas.setBounds(x, y, 60, 90);
                    break;
                case 8:
                    OchoPicas.setVisible(true);
                    OchoPicas.setBounds(x, y, 60, 90);
                    break;
                case 9:
                    NuevePicas.setVisible(true);
                    NuevePicas.setBounds(x, y, 60, 90);
                    break;
                case 10:
                    DiezPicas.setVisible(true);
                    DiezPicas.setBounds(x, y, 60, 90);
                    break;
                case 11:
                    JotaPicas.setVisible(true);
                    JotaPicas.setBounds(x, y, 60, 90);
                    break;
                case 12:
                    ReinaPicas.setVisible(true);
                    ReinaPicas.setBounds(x, y, 60, 90);
                    break;
                case 13:
                    ReyPicas.setVisible(true);
                    ReyPicas.setBounds(x, y, 60, 90);
                    break;
            }
        } else if (n.getPalo().equals("Corazones")) {
            switch (n.getNumero()) {
                case 1:
                    AsCorazones.setVisible(true);
                    AsCorazones.setBounds(x, y, 60, 90);
                    break;
                case 2:
                    DosCorazones.setVisible(true);
                    DosCorazones.setBounds(x, y, 60, 90);
                    break;
                case 3:
                    TresCorazones.setVisible(true);
                    TresCorazones.setBounds(x, y, 60, 90);
                    break;
                case 4:
                    CuatroCorazones.setVisible(true);
                    CuatroCorazones.setBounds(x, y, 60, 90);
                    break;
                case 5:
                    CincoCorazones.setVisible(true);
                    CincoCorazones.setBounds(x, y, 60, 90);
                    break;
                case 6:
                    SeisCorazones.setVisible(true);
                    SeisCorazones.setBounds(x, y, 60, 90);
                    break;
                case 7:
                    SieteCorazones.setVisible(true);
                    SieteCorazones.setBounds(x, y, 60, 90);
                    break;
                case 8:
                    OchoCorazones.setVisible(true);
                    OchoCorazones.setBounds(x, y, 60, 90);
                    break;
                case 9:
                    NueveCorazones.setVisible(true);
                    NueveCorazones.setBounds(x, y, 60, 90);
                    break;
                case 10:
                    DiezCorazones.setVisible(true);
                    DiezCorazones.setBounds(x, y, 60, 90);
                    break;
                case 11:
                    JotaCorazones.setVisible(true);
                    JotaCorazones.setBounds(x, y, 60, 90);
                    break;
                case 12:
                    ReinaCorazones.setVisible(true);
                    ReinaCorazones.setBounds(x, y, 60, 90);
                    break;
                case 13:
                    ReyCorazones.setVisible(true);
                    ReyCorazones.setBounds(x, y, 60, 90);
                    break;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AsCorazones;
    private javax.swing.JLabel AsDiamantes;
    private javax.swing.JLabel AsPicas;
    private javax.swing.JLabel AsTreboles;
    private javax.swing.JLabel CincoCorazones;
    private javax.swing.JLabel CincoDiamantes;
    private javax.swing.JLabel CincoPicas;
    private javax.swing.JLabel CincoTreboles;
    private javax.swing.JLabel CuatroCorazones;
    private javax.swing.JLabel CuatroDiamantes;
    private javax.swing.JLabel CuatroPicas;
    private javax.swing.JLabel CuatroTreboles;
    private javax.swing.JLabel DiezCorazones;
    private javax.swing.JLabel DiezDiamantes;
    private javax.swing.JLabel DiezPicas;
    private javax.swing.JLabel DiezTreboles;
    private javax.swing.JLabel DosCorazones;
    private javax.swing.JLabel DosDiamantes;
    private javax.swing.JLabel DosPicas;
    private javax.swing.JLabel DosTreboles;
    private javax.swing.JLabel JotaCorazones;
    private javax.swing.JLabel JotaDiamantes;
    private javax.swing.JLabel JotaPicas;
    private javax.swing.JLabel JotaTreboles;
    private javax.swing.JLabel NueveCorazones;
    private javax.swing.JLabel NueveDiamantes;
    private javax.swing.JLabel NuevePicas;
    private javax.swing.JLabel NueveTreboles;
    private javax.swing.JLabel OchoCorazones;
    private javax.swing.JLabel OchoDiamantes;
    private javax.swing.JLabel OchoPicas;
    private javax.swing.JLabel OchoTreboles;
    private javax.swing.JLabel ReinaCorazones;
    private javax.swing.JLabel ReinaDiamantes;
    private javax.swing.JLabel ReinaPicas;
    private javax.swing.JLabel ReinaTreboles;
    private javax.swing.JLabel ReyCorazones;
    private javax.swing.JLabel ReyDiamantes;
    private javax.swing.JLabel ReyPicas;
    private javax.swing.JLabel ReyTreboles;
    private javax.swing.JLabel SeisCorazones;
    private javax.swing.JLabel SeisDiamantes;
    private javax.swing.JLabel SeisPicas;
    private javax.swing.JLabel SeisTreboles;
    private javax.swing.JLabel SieteCorazones;
    private javax.swing.JLabel SieteDiamantes;
    private javax.swing.JLabel SietePicas;
    private javax.swing.JLabel SieteTreboles;
    private javax.swing.JLabel TresCorazones;
    private javax.swing.JLabel TresDiamantes;
    private javax.swing.JLabel TresPicas;
    private javax.swing.JLabel TresTreboles;
    private javax.swing.JButton apuestaButton;
    private javax.swing.JLabel avisoInsufSaldo;
    private javax.swing.JButton checaButton;
    private javax.swing.JLabel decorCard;
    private javax.swing.JLabel decorCard1;
    private javax.swing.JLabel decorCard2;
    private javax.swing.JLabel decorCard3;
    private javax.swing.JInternalFrame insufSaldoAviso;
    private javax.swing.JLabel mesaPoker;
    private javax.swing.JButton okInsufSaldo;
    private javax.swing.JButton okResultadoFinal;
    private javax.swing.JLabel oponenteLabel;
    private javax.swing.JTextField recibeApuesta;
    private javax.swing.JInternalFrame resultadoFrame;
    private javax.swing.JButton resultadoJuego;
    private javax.swing.JLabel saldoActual;
    private javax.swing.JButton tempInicia;
    private javax.swing.JLabel textoPozo;
    private javax.swing.JLabel textoResultadoFinal;
    // End of variables declaration//GEN-END:variables
}
